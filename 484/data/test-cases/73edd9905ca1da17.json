{
  "uid" : "73edd9905ca1da17",
  "name" : "test_brownie_deploy",
  "fullName" : "tests.brownie.test_brownie#test_brownie_deploy",
  "historyId" : "6e83a925951bfd8b9c39b6ea82974dc9",
  "time" : {
    "start" : 1642073998130,
    "stop" : 1642073998425,
    "duration" : 295
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f1167123a00>: Failed to establish a new connection: [Errno 111] Connection refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "brownie_project = <Project 'TokenProject'>\n\n    def test_brownie_deploy(brownie_project):\n>       deployed_contract = brownie_project.Token.deploy(\n            \"Test deploy\", \"TST\", 10, 10000000, {\"from\": accounts[0]}\n        )\n\ntests/brownie/test_brownie.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries ex...ion refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by N...ction refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f1167123a00>: Failed to establish a new connection: [Errno 111] Connection refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1642073985866,
      "stop" : 1642073985866,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1642073987038,
      "stop" : 1642073998129,
      "duration" : 11091
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f1167123a00>: Failed to establish a new connection: [Errno 111] Connection refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
    "statusTrace" : "brownie_project = <Project 'TokenProject'>\n\n    def test_brownie_deploy(brownie_project):\n>       deployed_contract = brownie_project.Token.deploy(\n            \"Test deploy\", \"TST\", 10, 10000000, {\"from\": accounts[0]}\n        )\n\ntests/brownie/test_brownie.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries ex...ion refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by N...ction refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f1167123a00>: Failed to establish a new connection: [Errno 111] Connection refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ecd4077616f1a7b4",
      "name" : "log",
      "source" : "ecd4077616f1a7b4.txt",
      "type" : "text/plain",
      "size" : 287
    }, {
      "uid" : "f721288c71d4881d",
      "name" : "stdout",
      "source" : "f721288c71d4881d.txt",
      "type" : "text/plain",
      "size" : 252
    }, {
      "uid" : "51dcfd840a286e5d",
      "name" : "stderr",
      "source" : "51dcfd840a286e5d.txt",
      "type" : "text/plain",
      "size" : 5841
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie"
  }, {
    "name" : "suite",
    "value" : "test_brownie"
  }, {
    "name" : "host",
    "value" : "fv-az128-463"
  }, {
    "name" : "thread",
    "value" : "3767-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.test_brownie"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 23,
        "skipped" : 0,
        "passed" : 73,
        "unknown" : 0,
        "total" : 96
      },
      "items" : [ {
        "uid" : "d5cf3e8a6142d9f4",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/483//#testresult/d5cf3e8a6142d9f4",
        "status" : "passed",
        "time" : {
          "start" : 1642059383618,
          "stop" : 1642059387020,
          "duration" : 3402
        }
      }, {
        "uid" : "be035862879881e9",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/482//#testresult/be035862879881e9",
        "status" : "passed",
        "time" : {
          "start" : 1642043708751,
          "stop" : 1642043711176,
          "duration" : 2425
        }
      }, {
        "uid" : "b6077866726d9102",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/481//#testresult/b6077866726d9102",
        "status" : "passed",
        "time" : {
          "start" : 1642034789606,
          "stop" : 1642034793300,
          "duration" : 3694
        }
      }, {
        "uid" : "c4d103acab198fba",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/479//#testresult/c4d103acab198fba",
        "status" : "passed",
        "time" : {
          "start" : 1642032955315,
          "stop" : 1642032958653,
          "duration" : 3338
        }
      }, {
        "uid" : "d9eead5e96f087f4",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/478//#testresult/d9eead5e96f087f4",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: http://proxy.night.stand.neontest.xyz/solana",
        "time" : {
          "start" : 1642032068613,
          "stop" : 1642032069097,
          "duration" : 484
        }
      }, {
        "uid" : "7fc2fb45d36dcaa",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/477//#testresult/7fc2fb45d36dcaa",
        "status" : "broken",
        "statusDetails" : "ValueError: connection already closed",
        "time" : {
          "start" : 1642031184356,
          "stop" : 1642031185078,
          "duration" : 722
        }
      }, {
        "uid" : "e021b78f97dc2791",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/476//#testresult/e021b78f97dc2791",
        "status" : "broken",
        "statusDetails" : "ValueError: connection already closed",
        "time" : {
          "start" : 1642028346619,
          "stop" : 1642028347250,
          "duration" : 631
        }
      }, {
        "uid" : "ac98f7cf7e31b1a2",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/474//#testresult/ac98f7cf7e31b1a2",
        "status" : "broken",
        "statusDetails" : "ValueError: connection already closed",
        "time" : {
          "start" : 1642025669055,
          "stop" : 1642025669644,
          "duration" : 589
        }
      }, {
        "uid" : "96a2568e126f2a46",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/472//#testresult/96a2568e126f2a46",
        "status" : "broken",
        "statusDetails" : "ValueError: connection already closed",
        "time" : {
          "start" : 1642018232842,
          "stop" : 1642018233749,
          "duration" : 907
        }
      }, {
        "uid" : "ed9103805f552a4c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/471//#testresult/ed9103805f552a4c",
        "status" : "broken",
        "statusDetails" : "ValueError: connection already closed",
        "time" : {
          "start" : 1642015600729,
          "stop" : 1642015601439,
          "duration" : 710
        }
      }, {
        "uid" : "8db629c51c63017b",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/470//#testresult/8db629c51c63017b",
        "status" : "broken",
        "statusDetails" : "ValueError: connection already closed",
        "time" : {
          "start" : 1642014226093,
          "stop" : 1642014227159,
          "duration" : 1066
        }
      }, {
        "uid" : "13dbda4bb3714db2",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/469//#testresult/13dbda4bb3714db2",
        "status" : "broken",
        "statusDetails" : "ValueError: connection already closed",
        "time" : {
          "start" : 1642012907898,
          "stop" : 1642012908858,
          "duration" : 960
        }
      }, {
        "uid" : "c66a4c013e24b81c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/468//#testresult/c66a4c013e24b81c",
        "status" : "broken",
        "statusDetails" : "ValueError: connection already closed",
        "time" : {
          "start" : 1642011417747,
          "stop" : 1642011418545,
          "duration" : 798
        }
      }, {
        "uid" : "7df9567607b4345",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/467//#testresult/7df9567607b4345",
        "status" : "passed",
        "time" : {
          "start" : 1642008700965,
          "stop" : 1642008704461,
          "duration" : 3496
        }
      }, {
        "uid" : "503956c6079143fd",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/466//#testresult/503956c6079143fd",
        "status" : "passed",
        "time" : {
          "start" : 1641997933925,
          "stop" : 1641997937709,
          "duration" : 3784
        }
      }, {
        "uid" : "8c0ad1669cd04b2b",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/465//#testresult/8c0ad1669cd04b2b",
        "status" : "passed",
        "time" : {
          "start" : 1641993695008,
          "stop" : 1641993699002,
          "duration" : 3994
        }
      }, {
        "uid" : "7d4b3cdb0a50b30d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/464//#testresult/7d4b3cdb0a50b30d",
        "status" : "passed",
        "time" : {
          "start" : 1641990957157,
          "stop" : 1641990960514,
          "duration" : 3357
        }
      }, {
        "uid" : "6b080ae9fd3892af",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/463//#testresult/6b080ae9fd3892af",
        "status" : "passed",
        "time" : {
          "start" : 1641986321615,
          "stop" : 1641986324674,
          "duration" : 3059
        }
      }, {
        "uid" : "966cf024fefaff50",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/461//#testresult/966cf024fefaff50",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f1894610490>: Failed to establish a new connection: [Errno 111] Connection refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641982475592,
          "stop" : 1641982475803,
          "duration" : 211
        }
      }, {
        "uid" : "d5d4e7fa295ddba5",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/460//#testresult/d5d4e7fa295ddba5",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f1894657670>: Failed to establish a new connection: [Errno 111] Connection refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641980264254,
          "stop" : 1641980264567,
          "duration" : 313
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "73edd9905ca1da17.json",
  "parameterValues" : [ ]
}