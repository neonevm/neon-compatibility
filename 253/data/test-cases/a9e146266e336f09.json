{
  "uid" : "a9e146266e336f09",
  "name" : "test_sender_balance_decreases",
  "fullName" : "tests.brownie.token.tests.test_transfer#test_sender_balance_decreases",
  "historyId" : "39fc04ca56c2456dd536d714e4310f55",
  "time" : {
    "start" : 1639724790225,
    "stop" : 1639724792655,
    "duration" : 2430
  },
  "status" : "broken",
  "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x62027dbf1f49bda64a761810ca953ed6621ab081e839ec217c82f160a4f7fd02",
  "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7fef47f226a0>\ntoken = <Token Contract '0x40ceab09bA7d87A61f5100157a38F18D51A995Be'>\n\n    def test_sender_balance_decreases(accounts, token):\n        sender_balance = token.balanceOf(accounts[0])\n        amount = sender_balance // 4\n    \n>       token.transfer(accounts[1], amount, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_transfer.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0xf595Fd634c3C1BFaaBC02615e9193C484e33f7Eb'>\nreceipt = <Transaction '\u001B[0;2;37m0x62027dbf1f49bda64a761810ca953ed6621ab081e839ec217c82f160a4f7fd02\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x62027dbf1f49bda64a761810ca953ed6621ab081e839ec217c82f160a4f7fd02\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1639724731013,
      "stop" : 1639724731013,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1639724732207,
      "stop" : 1639724748641,
      "duration" : 16434
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1639724755961,
      "stop" : 1639724756229,
      "duration" : 268
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1639724755961,
      "stop" : 1639724755961,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1639724782356,
      "stop" : 1639724790224,
      "duration" : 7868
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x62027dbf1f49bda64a761810ca953ed6621ab081e839ec217c82f160a4f7fd02",
    "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7fef47f226a0>\ntoken = <Token Contract '0x40ceab09bA7d87A61f5100157a38F18D51A995Be'>\n\n    def test_sender_balance_decreases(accounts, token):\n        sender_balance = token.balanceOf(accounts[0])\n        amount = sender_balance // 4\n    \n>       token.transfer(accounts[1], amount, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_transfer.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0xf595Fd634c3C1BFaaBC02615e9193C484e33f7Eb'>\nreceipt = <Transaction '\u001B[0;2;37m0x62027dbf1f49bda64a761810ca953ed6621ab081e839ec217c82f160a4f7fd02\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x62027dbf1f49bda64a761810ca953ed6621ab081e839ec217c82f160a4f7fd02\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "743dd485abf562a6",
      "name" : "stdout",
      "source" : "743dd485abf562a6.txt",
      "type" : "text/plain",
      "size" : 716
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1639725087246,
      "stop" : 1639725087246,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transfer"
  }, {
    "name" : "host",
    "value" : "fv-az39-454"
  }, {
    "name" : "thread",
    "value" : "4462-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transfer"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 27,
        "skipped" : 0,
        "passed" : 82,
        "unknown" : 0,
        "total" : 109
      },
      "items" : [ {
        "uid" : "85f125c3a861a6c4",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/251//#testresult/85f125c3a861a6c4",
        "status" : "passed",
        "time" : {
          "start" : 1639710814910,
          "stop" : 1639710817598,
          "duration" : 2688
        }
      }, {
        "uid" : "f1c8c8e73f096df3",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/250//#testresult/f1c8c8e73f096df3",
        "status" : "passed",
        "time" : {
          "start" : 1639701332133,
          "stop" : 1639701335900,
          "duration" : 3767
        }
      }, {
        "uid" : "4d7f70b8359c8337",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/249//#testresult/4d7f70b8359c8337",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ChunkedEncodingError: (\"Connection broken: ConnectionResetError(104, 'Connection reset by peer')\", ConnectionResetError(104, 'Connection reset by peer'))",
        "time" : {
          "start" : 1639695092922,
          "stop" : 1639695092922,
          "duration" : 0
        }
      }, {
        "uid" : "da12807f6cbe2ed1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/247//#testresult/da12807f6cbe2ed1",
        "status" : "passed",
        "time" : {
          "start" : 1639684821534,
          "stop" : 1639684824557,
          "duration" : 3023
        }
      }, {
        "uid" : "e49e254b2bdcd9d0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/245//#testresult/e49e254b2bdcd9d0",
        "status" : "passed",
        "time" : {
          "start" : 1639674172147,
          "stop" : 1639674174614,
          "duration" : 2467
        }
      }, {
        "uid" : "8885b2bf40450776",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/242//#testresult/8885b2bf40450776",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639663141220,
          "stop" : 1639663141220,
          "duration" : 0
        }
      }, {
        "uid" : "c6de35bd732aed92",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/241//#testresult/c6de35bd732aed92",
        "status" : "passed",
        "time" : {
          "start" : 1639661313076,
          "stop" : 1639661316253,
          "duration" : 3177
        }
      }, {
        "uid" : "c4f7eccd6c761636",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/238//#testresult/c4f7eccd6c761636",
        "status" : "passed",
        "time" : {
          "start" : 1639651812968,
          "stop" : 1639651815981,
          "duration" : 3013
        }
      }, {
        "uid" : "bbfd56fd6a4660ac",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/237//#testresult/bbfd56fd6a4660ac",
        "status" : "passed",
        "time" : {
          "start" : 1639648265477,
          "stop" : 1639648268441,
          "duration" : 2964
        }
      }, {
        "uid" : "c76ef057d1572bb1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/236//#testresult/c76ef057d1572bb1",
        "status" : "passed",
        "time" : {
          "start" : 1639645608551,
          "stop" : 1639645612550,
          "duration" : 3999
        }
      }, {
        "uid" : "8be7353520543950",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/235//#testresult/8be7353520543950",
        "status" : "passed",
        "time" : {
          "start" : 1639643185264,
          "stop" : 1639643188851,
          "duration" : 3587
        }
      }, {
        "uid" : "a746f68aa87962a2",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/234//#testresult/a746f68aa87962a2",
        "status" : "passed",
        "time" : {
          "start" : 1639632934744,
          "stop" : 1639632936984,
          "duration" : 2240
        }
      }, {
        "uid" : "f5b2864a657d3e6d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/233//#testresult/f5b2864a657d3e6d",
        "status" : "passed",
        "time" : {
          "start" : 1639624482346,
          "stop" : 1639624486035,
          "duration" : 3689
        }
      }, {
        "uid" : "be8beb69ba46e6c1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/232//#testresult/be8beb69ba46e6c1",
        "status" : "passed",
        "time" : {
          "start" : 1639614688106,
          "stop" : 1639614691367,
          "duration" : 3261
        }
      }, {
        "uid" : "1293df35e029f42a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/230//#testresult/1293df35e029f42a",
        "status" : "passed",
        "time" : {
          "start" : 1639590969400,
          "stop" : 1639590972269,
          "duration" : 2869
        }
      }, {
        "uid" : "f6b8d6c6d547098f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/228//#testresult/f6b8d6c6d547098f",
        "status" : "passed",
        "time" : {
          "start" : 1639580747480,
          "stop" : 1639580749751,
          "duration" : 2271
        }
      }, {
        "uid" : "bd6dea5b85f5eca5",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/227//#testresult/bd6dea5b85f5eca5",
        "status" : "passed",
        "time" : {
          "start" : 1639577798209,
          "stop" : 1639577800578,
          "duration" : 2369
        }
      }, {
        "uid" : "c2b80ed1802dff50",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/226//#testresult/c2b80ed1802dff50",
        "status" : "passed",
        "time" : {
          "start" : 1639575102017,
          "stop" : 1639575106488,
          "duration" : 4471
        }
      }, {
        "uid" : "f13a009248a2c337",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/225//#testresult/f13a009248a2c337",
        "status" : "passed",
        "time" : {
          "start" : 1639574787044,
          "stop" : 1639574788864,
          "duration" : 1820
        }
      }, {
        "uid" : "f1ffe6c334469268",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/224//#testresult/f1ffe6c334469268",
        "status" : "passed",
        "time" : {
          "start" : 1639574171964,
          "stop" : 1639574174446,
          "duration" : 2482
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "a9e146266e336f09.json",
  "parameterValues" : [ ]
}