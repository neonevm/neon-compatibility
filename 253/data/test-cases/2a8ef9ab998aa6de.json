{
  "uid" : "2a8ef9ab998aa6de",
  "name" : "test_approve",
  "fullName" : "tests.brownie.token.tests.test_approve#test_approve",
  "historyId" : "c8cbe460458a289bf8144e497a31facd",
  "time" : {
    "start" : 1639724761805,
    "stop" : 1639724764577,
    "duration" : 2772
  },
  "status" : "broken",
  "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x4d177b088140afae04fceaba634f55f53735196f9bd317019b30a9ba3f60a6d8",
  "statusTrace" : "token = <Token Contract '0x79f895a4F926B4c4aCB08c0375fEd77932402d63'>\naccounts = <brownie.network.account.Accounts object at 0x7fef47f226a0>\n\n    def test_approve(token, accounts):\n>       token.approve(accounts[1], 10**19, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_approve.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0xf595Fd634c3C1BFaaBC02615e9193C484e33f7Eb'>\nreceipt = <Transaction '\u001B[0;2;37m0x4d177b088140afae04fceaba634f55f53735196f9bd317019b30a9ba3f60a6d8\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x4d177b088140afae04fceaba634f55f53735196f9bd317019b30a9ba3f60a6d8\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1639724731013,
      "stop" : 1639724731013,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1639724732207,
      "stop" : 1639724748641,
      "duration" : 16434
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1639724755961,
      "stop" : 1639724756229,
      "duration" : 268
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1639724755961,
      "stop" : 1639724755961,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1639724756229,
      "stop" : 1639724760476,
      "duration" : 4247
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x4d177b088140afae04fceaba634f55f53735196f9bd317019b30a9ba3f60a6d8",
    "statusTrace" : "token = <Token Contract '0x79f895a4F926B4c4aCB08c0375fEd77932402d63'>\naccounts = <brownie.network.account.Accounts object at 0x7fef47f226a0>\n\n    def test_approve(token, accounts):\n>       token.approve(accounts[1], 10**19, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_approve.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0xf595Fd634c3C1BFaaBC02615e9193C484e33f7Eb'>\nreceipt = <Transaction '\u001B[0;2;37m0x4d177b088140afae04fceaba634f55f53735196f9bd317019b30a9ba3f60a6d8\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x4d177b088140afae04fceaba634f55f53735196f9bd317019b30a9ba3f60a6d8\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f7e2b706d1e478fb",
      "name" : "stdout",
      "source" : "f7e2b706d1e478fb.txt",
      "type" : "text/plain",
      "size" : 194
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1639725087246,
      "stop" : 1639725087246,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_approve"
  }, {
    "name" : "host",
    "value" : "fv-az39-454"
  }, {
    "name" : "thread",
    "value" : "4462-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_approve"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 22,
        "skipped" : 0,
        "passed" : 87,
        "unknown" : 0,
        "total" : 109
      },
      "items" : [ {
        "uid" : "cfbb03e1b17d8ba0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/251//#testresult/cfbb03e1b17d8ba0",
        "status" : "passed",
        "time" : {
          "start" : 1639710781923,
          "stop" : 1639710785098,
          "duration" : 3175
        }
      }, {
        "uid" : "526f13cc67ecca5",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/250//#testresult/526f13cc67ecca5",
        "status" : "passed",
        "time" : {
          "start" : 1639701299723,
          "stop" : 1639701302945,
          "duration" : 3222
        }
      }, {
        "uid" : "581d2e6d6af807d9",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/249//#testresult/581d2e6d6af807d9",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ChunkedEncodingError: (\"Connection broken: ConnectionResetError(104, 'Connection reset by peer')\", ConnectionResetError(104, 'Connection reset by peer'))",
        "time" : {
          "start" : 1639695091000,
          "stop" : 1639695091000,
          "duration" : 0
        }
      }, {
        "uid" : "245eac196dd229ec",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/247//#testresult/245eac196dd229ec",
        "status" : "passed",
        "time" : {
          "start" : 1639684787743,
          "stop" : 1639684790686,
          "duration" : 2943
        }
      }, {
        "uid" : "979a8fc5752180da",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/245//#testresult/979a8fc5752180da",
        "status" : "passed",
        "time" : {
          "start" : 1639674143250,
          "stop" : 1639674145973,
          "duration" : 2723
        }
      }, {
        "uid" : "7843d30c81f0fdeb",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/242//#testresult/7843d30c81f0fdeb",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639663140616,
          "stop" : 1639663140616,
          "duration" : 0
        }
      }, {
        "uid" : "793228744fe331cd",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/241//#testresult/793228744fe331cd",
        "status" : "passed",
        "time" : {
          "start" : 1639661280971,
          "stop" : 1639661284248,
          "duration" : 3277
        }
      }, {
        "uid" : "69356d2f6f10cd96",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/238//#testresult/69356d2f6f10cd96",
        "status" : "passed",
        "time" : {
          "start" : 1639651782265,
          "stop" : 1639651784967,
          "duration" : 2702
        }
      }, {
        "uid" : "c507252a329171cd",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/237//#testresult/c507252a329171cd",
        "status" : "passed",
        "time" : {
          "start" : 1639648234292,
          "stop" : 1639648237252,
          "duration" : 2960
        }
      }, {
        "uid" : "dafdfa615c4f6c71",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/236//#testresult/dafdfa615c4f6c71",
        "status" : "passed",
        "time" : {
          "start" : 1639645576666,
          "stop" : 1639645579461,
          "duration" : 2795
        }
      }, {
        "uid" : "cf69c05e4c9fef45",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/235//#testresult/cf69c05e4c9fef45",
        "status" : "passed",
        "time" : {
          "start" : 1639643150306,
          "stop" : 1639643153303,
          "duration" : 2997
        }
      }, {
        "uid" : "70ddb39f392bf659",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/234//#testresult/70ddb39f392bf659",
        "status" : "passed",
        "time" : {
          "start" : 1639632912236,
          "stop" : 1639632914218,
          "duration" : 1982
        }
      }, {
        "uid" : "785fb1ceee28ed59",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/233//#testresult/785fb1ceee28ed59",
        "status" : "passed",
        "time" : {
          "start" : 1639624451102,
          "stop" : 1639624453566,
          "duration" : 2464
        }
      }, {
        "uid" : "63f70adaac15c04f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/232//#testresult/63f70adaac15c04f",
        "status" : "passed",
        "time" : {
          "start" : 1639614656224,
          "stop" : 1639614658996,
          "duration" : 2772
        }
      }, {
        "uid" : "6fe875b603ef9455",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/230//#testresult/6fe875b603ef9455",
        "status" : "passed",
        "time" : {
          "start" : 1639590935967,
          "stop" : 1639590939896,
          "duration" : 3929
        }
      }, {
        "uid" : "d0ea0d2fd2ed330c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/228//#testresult/d0ea0d2fd2ed330c",
        "status" : "passed",
        "time" : {
          "start" : 1639580724404,
          "stop" : 1639580726931,
          "duration" : 2527
        }
      }, {
        "uid" : "2c202cc9c51b6ea4",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/227//#testresult/2c202cc9c51b6ea4",
        "status" : "passed",
        "time" : {
          "start" : 1639577771984,
          "stop" : 1639577774650,
          "duration" : 2666
        }
      }, {
        "uid" : "c2afe1bd6e301c14",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/226//#testresult/c2afe1bd6e301c14",
        "status" : "passed",
        "time" : {
          "start" : 1639575078154,
          "stop" : 1639575080535,
          "duration" : 2381
        }
      }, {
        "uid" : "242ea84bbcb59898",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/225//#testresult/242ea84bbcb59898",
        "status" : "passed",
        "time" : {
          "start" : 1639574769709,
          "stop" : 1639574771726,
          "duration" : 2017
        }
      }, {
        "uid" : "99e0b3187533c44a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/224//#testresult/99e0b3187533c44a",
        "status" : "passed",
        "time" : {
          "start" : 1639574148726,
          "stop" : 1639574150660,
          "duration" : 1934
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "2a8ef9ab998aa6de.json",
  "parameterValues" : [ ]
}