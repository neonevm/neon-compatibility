{
  "uid" : "8b53f3c0a9b00c5d",
  "name" : "test_transfer_to_self",
  "fullName" : "tests.brownie.token.tests.test_transfer#test_transfer_to_self",
  "historyId" : "cce1f431a8610d0d4bb26f30bb566f26",
  "time" : {
    "start" : 1639724814012,
    "stop" : 1639724815958,
    "duration" : 1946
  },
  "status" : "broken",
  "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xe9a09a9a11ce316d1dabb69de3059525ef749ac03341e85cc420da2614efab3a",
  "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7fef47f226a0>\ntoken = <Token Contract '0x40ceab09bA7d87A61f5100157a38F18D51A995Be'>\n\n    def test_transfer_to_self(accounts, token):\n        sender_balance = token.balanceOf(accounts[0])\n        amount = sender_balance // 4\n    \n>       token.transfer(accounts[0], amount, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_transfer.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0xf595Fd634c3C1BFaaBC02615e9193C484e33f7Eb'>\nreceipt = <Transaction '\u001B[0;2;37m0xe9a09a9a11ce316d1dabb69de3059525ef749ac03341e85cc420da2614efab3a\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xe9a09a9a11ce316d1dabb69de3059525ef749ac03341e85cc420da2614efab3a\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1639724731013,
      "stop" : 1639724731013,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1639724732207,
      "stop" : 1639724748641,
      "duration" : 16434
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1639724755961,
      "stop" : 1639724756229,
      "duration" : 268
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1639724755961,
      "stop" : 1639724755961,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1639724782356,
      "stop" : 1639724790224,
      "duration" : 7868
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xe9a09a9a11ce316d1dabb69de3059525ef749ac03341e85cc420da2614efab3a",
    "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7fef47f226a0>\ntoken = <Token Contract '0x40ceab09bA7d87A61f5100157a38F18D51A995Be'>\n\n    def test_transfer_to_self(accounts, token):\n        sender_balance = token.balanceOf(accounts[0])\n        amount = sender_balance // 4\n    \n>       token.transfer(accounts[0], amount, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_transfer.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0xf595Fd634c3C1BFaaBC02615e9193C484e33f7Eb'>\nreceipt = <Transaction '\u001B[0;2;37m0xe9a09a9a11ce316d1dabb69de3059525ef749ac03341e85cc420da2614efab3a\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xe9a09a9a11ce316d1dabb69de3059525ef749ac03341e85cc420da2614efab3a\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3a89fba0a774fcc5",
      "name" : "stdout",
      "source" : "3a89fba0a774fcc5.txt",
      "type" : "text/plain",
      "size" : 195
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1639725087246,
      "stop" : 1639725087246,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transfer"
  }, {
    "name" : "host",
    "value" : "fv-az39-454"
  }, {
    "name" : "thread",
    "value" : "4462-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transfer"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 26,
        "skipped" : 0,
        "passed" : 83,
        "unknown" : 0,
        "total" : 109
      },
      "items" : [ {
        "uid" : "c212425bcca8ec7c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/251//#testresult/c212425bcca8ec7c",
        "status" : "passed",
        "time" : {
          "start" : 1639710836163,
          "stop" : 1639710839920,
          "duration" : 3757
        }
      }, {
        "uid" : "b711f565829e0032",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/250//#testresult/b711f565829e0032",
        "status" : "passed",
        "time" : {
          "start" : 1639701354876,
          "stop" : 1639701359463,
          "duration" : 4587
        }
      }, {
        "uid" : "9f22df0be8c49769",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/249//#testresult/9f22df0be8c49769",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ChunkedEncodingError: (\"Connection broken: ConnectionResetError(104, 'Connection reset by peer')\", ConnectionResetError(104, 'Connection reset by peer'))",
        "time" : {
          "start" : 1639695094665,
          "stop" : 1639695094665,
          "duration" : 0
        }
      }, {
        "uid" : "689ac9ce28f5ab25",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/247//#testresult/689ac9ce28f5ab25",
        "status" : "passed",
        "time" : {
          "start" : 1639684840992,
          "stop" : 1639684844267,
          "duration" : 3275
        }
      }, {
        "uid" : "7b1ffee8b92d7a15",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/245//#testresult/7b1ffee8b92d7a15",
        "status" : "passed",
        "time" : {
          "start" : 1639674190526,
          "stop" : 1639674192765,
          "duration" : 2239
        }
      }, {
        "uid" : "aec823f48cef867",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/242//#testresult/aec823f48cef867",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639663142167,
          "stop" : 1639663142167,
          "duration" : 0
        }
      }, {
        "uid" : "71aa11e45fd0e86b",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/241//#testresult/71aa11e45fd0e86b",
        "status" : "passed",
        "time" : {
          "start" : 1639661335064,
          "stop" : 1639661339561,
          "duration" : 4497
        }
      }, {
        "uid" : "d9e531858a7f1bda",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/238//#testresult/d9e531858a7f1bda",
        "status" : "passed",
        "time" : {
          "start" : 1639651838540,
          "stop" : 1639651842371,
          "duration" : 3831
        }
      }, {
        "uid" : "299822daf1243c00",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/237//#testresult/299822daf1243c00",
        "status" : "passed",
        "time" : {
          "start" : 1639648287966,
          "stop" : 1639648291997,
          "duration" : 4031
        }
      }, {
        "uid" : "d6e5b491f88a1472",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/236//#testresult/d6e5b491f88a1472",
        "status" : "passed",
        "time" : {
          "start" : 1639645631895,
          "stop" : 1639645635716,
          "duration" : 3821
        }
      }, {
        "uid" : "35a4146dae46bf8c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/235//#testresult/35a4146dae46bf8c",
        "status" : "passed",
        "time" : {
          "start" : 1639643209291,
          "stop" : 1639643212728,
          "duration" : 3437
        }
      }, {
        "uid" : "b89a5220bfe2b1fb",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/234//#testresult/b89a5220bfe2b1fb",
        "status" : "passed",
        "time" : {
          "start" : 1639632949836,
          "stop" : 1639632952377,
          "duration" : 2541
        }
      }, {
        "uid" : "2e32175127639a01",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/233//#testresult/2e32175127639a01",
        "status" : "passed",
        "time" : {
          "start" : 1639624508674,
          "stop" : 1639624512079,
          "duration" : 3405
        }
      }, {
        "uid" : "3582bfc89780790c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/232//#testresult/3582bfc89780790c",
        "status" : "passed",
        "time" : {
          "start" : 1639614709016,
          "stop" : 1639614712415,
          "duration" : 3399
        }
      }, {
        "uid" : "25c37af8b8dc7a22",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/230//#testresult/25c37af8b8dc7a22",
        "status" : "passed",
        "time" : {
          "start" : 1639590988399,
          "stop" : 1639590991811,
          "duration" : 3412
        }
      }, {
        "uid" : "29938f1662306817",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/228//#testresult/29938f1662306817",
        "status" : "passed",
        "time" : {
          "start" : 1639580762001,
          "stop" : 1639580764710,
          "duration" : 2709
        }
      }, {
        "uid" : "8435c802174e93",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/227//#testresult/8435c802174e93",
        "status" : "passed",
        "time" : {
          "start" : 1639577816042,
          "stop" : 1639577819265,
          "duration" : 3223
        }
      }, {
        "uid" : "9163c52b6137024c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/226//#testresult/9163c52b6137024c",
        "status" : "passed",
        "time" : {
          "start" : 1639575121278,
          "stop" : 1639575124602,
          "duration" : 3324
        }
      }, {
        "uid" : "f81336bfa61b5cbc",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/225//#testresult/f81336bfa61b5cbc",
        "status" : "passed",
        "time" : {
          "start" : 1639574800845,
          "stop" : 1639574802550,
          "duration" : 1705
        }
      }, {
        "uid" : "80a9b58c9ba9a5bd",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/224//#testresult/80a9b58c9ba9a5bd",
        "status" : "passed",
        "time" : {
          "start" : 1639574187664,
          "stop" : 1639574190342,
          "duration" : 2678
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "8b53f3c0a9b00c5d.json",
  "parameterValues" : [ ]
}