{
  "uid" : "5641f72f0e517a0d",
  "name" : "test_brownie_deploy",
  "fullName" : "tests.brownie.test_brownie#test_brownie_deploy",
  "historyId" : "6e83a925951bfd8b9c39b6ea82974dc9",
  "time" : {
    "start" : 1638891847578,
    "stop" : 1638891848010,
    "duration" : 432
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Error processing Instruction 1: invalid account data for instruction'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "brownie_project = <Project 'TokenProject'>\n\n    def test_brownie_deploy(brownie_project):\n>       deployed_contract = brownie_project.Token.deploy(\n            \"Test deploy\", \"TST\", 10, 10000000, {\"from\": accounts[0]}\n        )\n\ntests/brownie/test_brownie.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'Transaction simulation failed: Error processing Instruction 1:...or instruction'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'Transaction simulation failed: Error processing Instruction 1: invalid account data for instruction'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'Transaction simulation failed: Error processing Instruction 1: invalid account data for instruction'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1638891832230,
      "stop" : 1638891832230,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1638891833911,
      "stop" : 1638891847577,
      "duration" : 13666
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Error processing Instruction 1: invalid account data for instruction'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
    "statusTrace" : "brownie_project = <Project 'TokenProject'>\n\n    def test_brownie_deploy(brownie_project):\n>       deployed_contract = brownie_project.Token.deploy(\n            \"Test deploy\", \"TST\", 10, 10000000, {\"from\": accounts[0]}\n        )\n\ntests/brownie/test_brownie.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'Transaction simulation failed: Error processing Instruction 1:...or instruction'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'Transaction simulation failed: Error processing Instruction 1: invalid account data for instruction'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'Transaction simulation failed: Error processing Instruction 1: invalid account data for instruction'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2809053ba11426c0",
      "name" : "log",
      "source" : "2809053ba11426c0.txt",
      "type" : "text/plain",
      "size" : 287
    }, {
      "uid" : "75c93266b2b63b7b",
      "name" : "stdout",
      "source" : "75c93266b2b63b7b.txt",
      "type" : "text/plain",
      "size" : 252
    }, {
      "uid" : "12ddddb14aad5db5",
      "name" : "stderr",
      "source" : "12ddddb14aad5db5.txt",
      "type" : "text/plain",
      "size" : 7027
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie"
  }, {
    "name" : "suite",
    "value" : "test_brownie"
  }, {
    "name" : "host",
    "value" : "fv-az28-363"
  }, {
    "name" : "thread",
    "value" : "3200-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.test_brownie"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 6,
        "skipped" : 0,
        "passed" : 30,
        "unknown" : 0,
        "total" : 36
      },
      "items" : [ {
        "uid" : "b4b8c3cc744812a0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/167//#testresult/b4b8c3cc744812a0",
        "status" : "passed",
        "time" : {
          "start" : 1638863103224,
          "stop" : 1638863107897,
          "duration" : 4673
        }
      }, {
        "uid" : "18cc1b005a2b0559",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/166//#testresult/18cc1b005a2b0559",
        "status" : "passed",
        "time" : {
          "start" : 1638846630191,
          "stop" : 1638846634890,
          "duration" : 4699
        }
      }, {
        "uid" : "705db6d4e436d927",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/165//#testresult/705db6d4e436d927",
        "status" : "passed",
        "time" : {
          "start" : 1638837001954,
          "stop" : 1638837008129,
          "duration" : 6175
        }
      }, {
        "uid" : "ee0fff162781a7a8",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/164//#testresult/ee0fff162781a7a8",
        "status" : "passed",
        "time" : {
          "start" : 1638818072520,
          "stop" : 1638818091498,
          "duration" : 18978
        }
      }, {
        "uid" : "53fa699340ebb3a3",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/163//#testresult/53fa699340ebb3a3",
        "status" : "passed",
        "time" : {
          "start" : 1638794620046,
          "stop" : 1638794638108,
          "duration" : 18062
        }
      }, {
        "uid" : "897e55d9f547c199",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/162//#testresult/897e55d9f547c199",
        "status" : "passed",
        "time" : {
          "start" : 1638760205905,
          "stop" : 1638760211427,
          "duration" : 5522
        }
      }, {
        "uid" : "4a00cb5757ca801e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/161//#testresult/4a00cb5757ca801e",
        "status" : "passed",
        "time" : {
          "start" : 1638750560693,
          "stop" : 1638750566853,
          "duration" : 6160
        }
      }, {
        "uid" : "17e3ab192e8d3d80",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/160//#testresult/17e3ab192e8d3d80",
        "status" : "passed",
        "time" : {
          "start" : 1638695731922,
          "stop" : 1638695737863,
          "duration" : 5941
        }
      }, {
        "uid" : "b5d58204bc946d9e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/159//#testresult/b5d58204bc946d9e",
        "status" : "passed",
        "time" : {
          "start" : 1638673786732,
          "stop" : 1638673791755,
          "duration" : 5023
        }
      }, {
        "uid" : "9c155ed03016ef36",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/158//#testresult/9c155ed03016ef36",
        "status" : "passed",
        "time" : {
          "start" : 1638664227208,
          "stop" : 1638664233037,
          "duration" : 5829
        }
      }, {
        "uid" : "b9013d7115cd55de",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/157//#testresult/b9013d7115cd55de",
        "status" : "passed",
        "time" : {
          "start" : 1638643333224,
          "stop" : 1638643339127,
          "duration" : 5903
        }
      }, {
        "uid" : "4bb873bb421b217e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/156//#testresult/4bb873bb421b217e",
        "status" : "passed",
        "time" : {
          "start" : 1638587375345,
          "stop" : 1638587380947,
          "duration" : 5602
        }
      }, {
        "uid" : "2bb349aa3dbba6a9",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/155//#testresult/2bb349aa3dbba6a9",
        "status" : "passed",
        "time" : {
          "start" : 1638577717869,
          "stop" : 1638577723105,
          "duration" : 5236
        }
      }, {
        "uid" : "d60aa05d5a6fc05",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/154//#testresult/d60aa05d5a6fc05",
        "status" : "passed",
        "time" : {
          "start" : 1638500984984,
          "stop" : 1638500990039,
          "duration" : 5055
        }
      }, {
        "uid" : "1e495089c38a869c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/153//#testresult/1e495089c38a869c",
        "status" : "passed",
        "time" : {
          "start" : 1638491340134,
          "stop" : 1638491345445,
          "duration" : 5311
        }
      }, {
        "uid" : "9b4ddf5911571ee6",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/152//#testresult/9b4ddf5911571ee6",
        "status" : "passed",
        "time" : {
          "start" : 1638477603435,
          "stop" : 1638477608322,
          "duration" : 4887
        }
      }, {
        "uid" : "38e68a4366bb73fd",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/151//#testresult/38e68a4366bb73fd",
        "status" : "passed",
        "time" : {
          "start" : 1638466487219,
          "stop" : 1638466493076,
          "duration" : 5857
        }
      }, {
        "uid" : "a918725a162591c6",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/150//#testresult/a918725a162591c6",
        "status" : "passed",
        "time" : {
          "start" : 1638453846467,
          "stop" : 1638453851458,
          "duration" : 4991
        }
      }, {
        "uid" : "a4e057767a48a558",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/149//#testresult/a4e057767a48a558",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='test3-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fbe4f5b5af0>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1638414584931,
          "stop" : 1638414585276,
          "duration" : 345
        }
      }, {
        "uid" : "dc043ba848587417",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/147//#testresult/dc043ba848587417",
        "status" : "passed",
        "time" : {
          "start" : 1638399262867,
          "stop" : 1638399267828,
          "duration" : 4961
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "5641f72f0e517a0d.json",
  "parameterValues" : [ ]
}