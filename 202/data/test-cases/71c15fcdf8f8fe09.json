{
  "uid" : "71c15fcdf8f8fe09",
  "name" : "test_brownie_deploy",
  "fullName" : "tests.brownie.test_brownie#test_brownie_deploy",
  "historyId" : "6e83a925951bfd8b9c39b6ea82974dc9",
  "time" : {
    "start" : 1639232338856,
    "stop" : 1639232339247,
    "duration" : 391
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Blockhash not found'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "brownie_project = <Project 'TokenProject'>\n\n    def test_brownie_deploy(brownie_project):\n>       deployed_contract = brownie_project.Token.deploy(\n            \"Test deploy\", \"TST\", 10, 10000000, {\"from\": accounts[0]}\n        )\n\ntests/brownie/test_brownie.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'Transaction simulation failed: Blockhash not found'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'Transaction simulation failed: Blockhash not found'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'Transaction simulation failed: Blockhash not found'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1639232318371,
      "stop" : 1639232318371,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1639232321513,
      "stop" : 1639232338855,
      "duration" : 17342
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Blockhash not found'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
    "statusTrace" : "brownie_project = <Project 'TokenProject'>\n\n    def test_brownie_deploy(brownie_project):\n>       deployed_contract = brownie_project.Token.deploy(\n            \"Test deploy\", \"TST\", 10, 10000000, {\"from\": accounts[0]}\n        )\n\ntests/brownie/test_brownie.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'Transaction simulation failed: Blockhash not found'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'Transaction simulation failed: Blockhash not found'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'Transaction simulation failed: Blockhash not found'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e6b22f6580d2822d",
      "name" : "log",
      "source" : "e6b22f6580d2822d.txt",
      "type" : "text/plain",
      "size" : 287
    }, {
      "uid" : "3d115758f1ca158a",
      "name" : "stdout",
      "source" : "3d115758f1ca158a.txt",
      "type" : "text/plain",
      "size" : 250
    }, {
      "uid" : "3143f3ca13dcc597",
      "name" : "stderr",
      "source" : "3143f3ca13dcc597.txt",
      "type" : "text/plain",
      "size" : 9354
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie"
  }, {
    "name" : "suite",
    "value" : "test_brownie"
  }, {
    "name" : "host",
    "value" : "fv-az81-402"
  }, {
    "name" : "thread",
    "value" : "4916-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.test_brownie"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 14,
        "skipped" : 0,
        "passed" : 53,
        "unknown" : 0,
        "total" : 67
      },
      "items" : [ {
        "uid" : "47612a5ba5712b60",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/201//#testresult/47612a5ba5712b60",
        "status" : "passed",
        "time" : {
          "start" : 1639230976258,
          "stop" : 1639230997439,
          "duration" : 21181
        }
      }, {
        "uid" : "b4f9d9cb7ddec41a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/199//#testresult/b4f9d9cb7ddec41a",
        "status" : "passed",
        "time" : {
          "start" : 1639223427990,
          "stop" : 1639223452740,
          "duration" : 24750
        }
      }, {
        "uid" : "c780ef9d823042b1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/199//#testresult/c780ef9d823042b1",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: '429 Client Error: Too Many Requests for url: https://neonevm.testnet.rpcpool.com/e7efde89606821742be8ba4a7ced'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639222185601,
          "stop" : 1639222185820,
          "duration" : 219
        }
      }, {
        "uid" : "bcf8a49736c2951",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/198//#testresult/bcf8a49736c2951",
        "status" : "passed",
        "time" : {
          "start" : 1639192356967,
          "stop" : 1639192390644,
          "duration" : 33677
        }
      }, {
        "uid" : "df871b517a71678f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/197//#testresult/df871b517a71678f",
        "status" : "passed",
        "time" : {
          "start" : 1639182595469,
          "stop" : 1639182599293,
          "duration" : 3824
        }
      }, {
        "uid" : "f31384803033d94b",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/196//#testresult/f31384803033d94b",
        "status" : "passed",
        "time" : {
          "start" : 1639152734834,
          "stop" : 1639152766193,
          "duration" : 31359
        }
      }, {
        "uid" : "17e6355bc1770df0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/195//#testresult/17e6355bc1770df0",
        "status" : "passed",
        "time" : {
          "start" : 1639128463837,
          "stop" : 1639128467893,
          "duration" : 4056
        }
      }, {
        "uid" : "d28f4a2318ad1727",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/194//#testresult/d28f4a2318ad1727",
        "status" : "passed",
        "time" : {
          "start" : 1639105988324,
          "stop" : 1639106075972,
          "duration" : 87648
        }
      }, {
        "uid" : "b771b73dc2b80880",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/193//#testresult/b771b73dc2b80880",
        "status" : "passed",
        "time" : {
          "start" : 1639096287287,
          "stop" : 1639096321086,
          "duration" : 33799
        }
      }, {
        "uid" : "e806677061da756a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/192//#testresult/e806677061da756a",
        "status" : "passed",
        "time" : {
          "start" : 1639085262462,
          "stop" : 1639085265882,
          "duration" : 3420
        }
      }, {
        "uid" : "73893681a59edc89",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/189//#testresult/73893681a59edc89",
        "status" : "passed",
        "time" : {
          "start" : 1639070156996,
          "stop" : 1639070187735,
          "duration" : 30739
        }
      }, {
        "uid" : "8d10c334db5ad571",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/190//#testresult/8d10c334db5ad571",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Error processing Instruction 1: invalid account data for instruction'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639074280878,
          "stop" : 1639074281468,
          "duration" : 590
        }
      }, {
        "uid" : "7f70290f3d5aca0f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/187//#testresult/7f70290f3d5aca0f",
        "status" : "passed",
        "time" : {
          "start" : 1639053099630,
          "stop" : 1639053122264,
          "duration" : 22634
        }
      }, {
        "uid" : "5dd6313b85eafb5f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/188//#testresult/5dd6313b85eafb5f",
        "status" : "passed",
        "time" : {
          "start" : 1639056704382,
          "stop" : 1639056708450,
          "duration" : 4068
        }
      }, {
        "uid" : "ebede2e2e058d9c6",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/186//#testresult/ebede2e2e058d9c6",
        "status" : "passed",
        "time" : {
          "start" : 1639045780883,
          "stop" : 1639045784625,
          "duration" : 3742
        }
      }, {
        "uid" : "4c1618559b502e43",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/184//#testresult/4c1618559b502e43",
        "status" : "broken",
        "statusDetails" : "ValueError: Verifying nonce before send transaction: Error processing Instruction 1: invalid program argument",
        "time" : {
          "start" : 1639019646682,
          "stop" : 1639019708791,
          "duration" : 62109
        }
      }, {
        "uid" : "d97baddefbc84a1d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/183//#testresult/d97baddefbc84a1d",
        "status" : "broken",
        "statusDetails" : "ValueError: Transaction simulation failed: Error processing Instruction 0: custom program error: 0x0",
        "time" : {
          "start" : 1639009846714,
          "stop" : 1639009909971,
          "duration" : 63257
        }
      }, {
        "uid" : "7a62a797ead3ba",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/182//#testresult/7a62a797ead3ba",
        "status" : "passed",
        "time" : {
          "start" : 1638990612358,
          "stop" : 1638990616731,
          "duration" : 4373
        }
      }, {
        "uid" : "1cccda91ecdc18ec",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/177//#testresult/1cccda91ecdc18ec",
        "status" : "passed",
        "time" : {
          "start" : 1638969635578,
          "stop" : 1638969656560,
          "duration" : 20982
        }
      }, {
        "uid" : "21523f394fd17f28",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/181//#testresult/21523f394fd17f28",
        "status" : "passed",
        "time" : {
          "start" : 1638980692657,
          "stop" : 1638980727078,
          "duration" : 34421
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "71c15fcdf8f8fe09.json",
  "parameterValues" : [ ]
}