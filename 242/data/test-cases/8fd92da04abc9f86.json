{
  "uid" : "8fd92da04abc9f86",
  "name" : "test_transfer_event_fires",
  "fullName" : "tests.brownie.token.tests.test_transfer#test_transfer_event_fires",
  "historyId" : "280e4c404d1b3ae75ac2f34ede6f3f3f",
  "time" : {
    "start" : 1639663142305,
    "stop" : 1639663142305,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "brownie_project = <Project 'TokenProject'>\naccounts = <brownie.network.account.Accounts object at 0x7fd26f7fb5b0>\n\n    @pytest.fixture(scope=\"module\")\n    def token(brownie_project, accounts):\n>       return brownie_project.Token.deploy(\"Test Token\", \"TST\", 18, 1e21, {'from': accounts[0]})\n\ntests/brownie/token/tests/conftest.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "token",
    "time" : {
      "start" : 1639663141220,
      "stop" : 1639663141626,
      "duration" : 406
    },
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n",
    "statusTrace" : "  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/_pytest/fixtures.py\", line 932, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/neon-compatibility/neon-compatibility/tests/brownie/token/tests/conftest.py\", line 49, in token\n    return brownie_project.Token.deploy(\"Test Token\", \"TST\", 18, 1e21, {'from': accounts[0]})\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py\", line 600, in __call__\n    return tx[\"from\"].deploy(\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py\", line 508, in deploy\n    receipt, exc = self._make_transaction(\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py\", line 725, in _make_transaction\n    raise VirtualMachineError(e) from None\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py\", line 121, in __init__\n    raise ValueError(str(exc)) from None\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transfer"
  }, {
    "name" : "host",
    "value" : "fv-az77-691"
  }, {
    "name" : "thread",
    "value" : "4499-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transfer"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 24,
        "skipped" : 0,
        "passed" : 79,
        "unknown" : 0,
        "total" : 103
      },
      "items" : [ {
        "uid" : "192e9f37b20bbb3c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/241//#testresult/192e9f37b20bbb3c",
        "status" : "passed",
        "time" : {
          "start" : 1639661340707,
          "stop" : 1639661344159,
          "duration" : 3452
        }
      }, {
        "uid" : "50bdc378b9812dc3",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/238//#testresult/50bdc378b9812dc3",
        "status" : "passed",
        "time" : {
          "start" : 1639651843275,
          "stop" : 1639651846223,
          "duration" : 2948
        }
      }, {
        "uid" : "c07c58ff8846a7a0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/237//#testresult/c07c58ff8846a7a0",
        "status" : "passed",
        "time" : {
          "start" : 1639648293091,
          "stop" : 1639648296245,
          "duration" : 3154
        }
      }, {
        "uid" : "7e1acc1e78d72f65",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/236//#testresult/7e1acc1e78d72f65",
        "status" : "passed",
        "time" : {
          "start" : 1639645636621,
          "stop" : 1639645639561,
          "duration" : 2940
        }
      }, {
        "uid" : "caa9ba26c50adee2",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/235//#testresult/caa9ba26c50adee2",
        "status" : "passed",
        "time" : {
          "start" : 1639643213444,
          "stop" : 1639643215914,
          "duration" : 2470
        }
      }, {
        "uid" : "b2c7dea36d3571b7",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/234//#testresult/b2c7dea36d3571b7",
        "status" : "passed",
        "time" : {
          "start" : 1639632953022,
          "stop" : 1639632955204,
          "duration" : 2182
        }
      }, {
        "uid" : "95a7188460679bd9",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/233//#testresult/95a7188460679bd9",
        "status" : "passed",
        "time" : {
          "start" : 1639624512886,
          "stop" : 1639624515840,
          "duration" : 2954
        }
      }, {
        "uid" : "5aa2775724fbcf7f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/232//#testresult/5aa2775724fbcf7f",
        "status" : "passed",
        "time" : {
          "start" : 1639614713139,
          "stop" : 1639614716558,
          "duration" : 3419
        }
      }, {
        "uid" : "177d945a0326d623",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/230//#testresult/177d945a0326d623",
        "status" : "passed",
        "time" : {
          "start" : 1639590992816,
          "stop" : 1639590995789,
          "duration" : 2973
        }
      }, {
        "uid" : "97c5160f4313ac51",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/228//#testresult/97c5160f4313ac51",
        "status" : "passed",
        "time" : {
          "start" : 1639580765322,
          "stop" : 1639580767114,
          "duration" : 1792
        }
      }, {
        "uid" : "f21cd82e39134dc9",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/227//#testresult/f21cd82e39134dc9",
        "status" : "passed",
        "time" : {
          "start" : 1639577820161,
          "stop" : 1639577822422,
          "duration" : 2261
        }
      }, {
        "uid" : "1b4c59ff31390dbc",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/226//#testresult/1b4c59ff31390dbc",
        "status" : "passed",
        "time" : {
          "start" : 1639575125129,
          "stop" : 1639575127866,
          "duration" : 2737
        }
      }, {
        "uid" : "fe78261bbfd67500",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/225//#testresult/fe78261bbfd67500",
        "status" : "passed",
        "time" : {
          "start" : 1639574803043,
          "stop" : 1639574804739,
          "duration" : 1696
        }
      }, {
        "uid" : "7137e4a7d1644e1e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/224//#testresult/7137e4a7d1644e1e",
        "status" : "passed",
        "time" : {
          "start" : 1639574191029,
          "stop" : 1639574193059,
          "duration" : 2030
        }
      }, {
        "uid" : "5530bd295381bdff",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/223//#testresult/5530bd295381bdff",
        "status" : "passed",
        "time" : {
          "start" : 1639573379854,
          "stop" : 1639573381820,
          "duration" : 1966
        }
      }, {
        "uid" : "423213b7f1c2e6f3",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/222//#testresult/423213b7f1c2e6f3",
        "status" : "passed",
        "time" : {
          "start" : 1639538042031,
          "stop" : 1639538044709,
          "duration" : 2678
        }
      }, {
        "uid" : "a77e85d80656fb49",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/221//#testresult/a77e85d80656fb49",
        "status" : "passed",
        "time" : {
          "start" : 1639528359790,
          "stop" : 1639528361978,
          "duration" : 2188
        }
      }, {
        "uid" : "18660aa43bac44a0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/220//#testresult/18660aa43bac44a0",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f2d30576fd0>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639461403739,
          "stop" : 1639461403739,
          "duration" : 0
        }
      }, {
        "uid" : "a08212d73855bcf3",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/219//#testresult/a08212d73855bcf3",
        "status" : "passed",
        "time" : {
          "start" : 1639451602959,
          "stop" : 1639451605089,
          "duration" : 2130
        }
      }, {
        "uid" : "18c3e6bbd14f1e4c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/218//#testresult/18c3e6bbd14f1e4c",
        "status" : "passed",
        "time" : {
          "start" : 1639442032027,
          "stop" : 1639442034222,
          "duration" : 2195
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "8fd92da04abc9f86.json",
  "parameterValues" : [ ]
}