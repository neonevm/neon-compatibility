{
  "uid" : "598f5cb38d147589",
  "name" : "test_caller_balance_not_affected",
  "fullName" : "tests.brownie.token.tests.test_transferFrom#test_caller_balance_not_affected",
  "historyId" : "5da0d00473da0ab1e6482a13be5b4f69",
  "time" : {
    "start" : 1639663142978,
    "stop" : 1639663142978,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "brownie_project = <Project 'TokenProject'>\naccounts = <brownie.network.account.Accounts object at 0x7fd26f7fb5b0>\n\n    @pytest.fixture(scope=\"module\")\n    def token(brownie_project, accounts):\n>       return brownie_project.Token.deploy(\"Test Token\", \"TST\", 18, 1e21, {'from': accounts[0]})\n\ntests/brownie/token/tests/conftest.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "token",
    "time" : {
      "start" : 1639663142378,
      "stop" : 1639663142795,
      "duration" : 417
    },
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n",
    "statusTrace" : "  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/_pytest/fixtures.py\", line 932, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/neon-compatibility/neon-compatibility/tests/brownie/token/tests/conftest.py\", line 49, in token\n    return brownie_project.Token.deploy(\"Test Token\", \"TST\", 18, 1e21, {'from': accounts[0]})\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py\", line 600, in __call__\n    return tx[\"from\"].deploy(\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py\", line 508, in deploy\n    receipt, exc = self._make_transaction(\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py\", line 725, in _make_transaction\n    raise VirtualMachineError(e) from None\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py\", line 121, in __init__\n    raise ValueError(str(exc)) from None\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transferFrom"
  }, {
    "name" : "host",
    "value" : "fv-az77-691"
  }, {
    "name" : "thread",
    "value" : "4499-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transferFrom"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 26,
        "skipped" : 0,
        "passed" : 77,
        "unknown" : 0,
        "total" : 103
      },
      "items" : [ {
        "uid" : "20398a07cf4420a5",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/241//#testresult/20398a07cf4420a5",
        "status" : "passed",
        "time" : {
          "start" : 1639661363319,
          "stop" : 1639661369187,
          "duration" : 5868
        }
      }, {
        "uid" : "b0c564376ee7de95",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/238//#testresult/b0c564376ee7de95",
        "status" : "passed",
        "time" : {
          "start" : 1639651863663,
          "stop" : 1639651869613,
          "duration" : 5950
        }
      }, {
        "uid" : "559f98808626570a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/237//#testresult/559f98808626570a",
        "status" : "passed",
        "time" : {
          "start" : 1639648314482,
          "stop" : 1639648320273,
          "duration" : 5791
        }
      }, {
        "uid" : "4d9ada4fd9f4e69a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/236//#testresult/4d9ada4fd9f4e69a",
        "status" : "passed",
        "time" : {
          "start" : 1639645656462,
          "stop" : 1639645662939,
          "duration" : 6477
        }
      }, {
        "uid" : "df7334687754c8d5",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/235//#testresult/df7334687754c8d5",
        "status" : "passed",
        "time" : {
          "start" : 1639643231474,
          "stop" : 1639643237295,
          "duration" : 5821
        }
      }, {
        "uid" : "f3a4798de40ddd44",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/234//#testresult/f3a4798de40ddd44",
        "status" : "passed",
        "time" : {
          "start" : 1639632967504,
          "stop" : 1639632971981,
          "duration" : 4477
        }
      }, {
        "uid" : "7bd710b2f7493085",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/233//#testresult/7bd710b2f7493085",
        "status" : "passed",
        "time" : {
          "start" : 1639624533805,
          "stop" : 1639624539940,
          "duration" : 6135
        }
      }, {
        "uid" : "36bff91992757004",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/232//#testresult/36bff91992757004",
        "status" : "passed",
        "time" : {
          "start" : 1639614733777,
          "stop" : 1639614741418,
          "duration" : 7641
        }
      }, {
        "uid" : "6d8eba86b8a0c509",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/230//#testresult/6d8eba86b8a0c509",
        "status" : "passed",
        "time" : {
          "start" : 1639591014546,
          "stop" : 1639591021528,
          "duration" : 6982
        }
      }, {
        "uid" : "88e32c11439cf5e1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/228//#testresult/88e32c11439cf5e1",
        "status" : "passed",
        "time" : {
          "start" : 1639580779483,
          "stop" : 1639580783666,
          "duration" : 4183
        }
      }, {
        "uid" : "5d722691849cc864",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/227//#testresult/5d722691849cc864",
        "status" : "passed",
        "time" : {
          "start" : 1639577839952,
          "stop" : 1639577845078,
          "duration" : 5126
        }
      }, {
        "uid" : "825a77ff84315d1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/226//#testresult/825a77ff84315d1",
        "status" : "passed",
        "time" : {
          "start" : 1639575142037,
          "stop" : 1639575146352,
          "duration" : 4315
        }
      }, {
        "uid" : "65706f908e27d91a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/225//#testresult/65706f908e27d91a",
        "status" : "passed",
        "time" : {
          "start" : 1639574814534,
          "stop" : 1639574817518,
          "duration" : 2984
        }
      }, {
        "uid" : "eb59a8a66109cc65",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/224//#testresult/eb59a8a66109cc65",
        "status" : "passed",
        "time" : {
          "start" : 1639574205428,
          "stop" : 1639574210098,
          "duration" : 4670
        }
      }, {
        "uid" : "8f0b5219d49179cc",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/223//#testresult/8f0b5219d49179cc",
        "status" : "passed",
        "time" : {
          "start" : 1639573393781,
          "stop" : 1639573398510,
          "duration" : 4729
        }
      }, {
        "uid" : "3e3509540298ea7f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/222//#testresult/3e3509540298ea7f",
        "status" : "passed",
        "time" : {
          "start" : 1639538057685,
          "stop" : 1639538062248,
          "duration" : 4563
        }
      }, {
        "uid" : "c7d492f118b635b",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/221//#testresult/c7d492f118b635b",
        "status" : "passed",
        "time" : {
          "start" : 1639528373927,
          "stop" : 1639528378593,
          "duration" : 4666
        }
      }, {
        "uid" : "1c9bd2c471a96234",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/220//#testresult/1c9bd2c471a96234",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f2d32d908e0>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639461404289,
          "stop" : 1639461404289,
          "duration" : 0
        }
      }, {
        "uid" : "e6ef60915b2ab021",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/219//#testresult/e6ef60915b2ab021",
        "status" : "passed",
        "time" : {
          "start" : 1639451616968,
          "stop" : 1639451621112,
          "duration" : 4144
        }
      }, {
        "uid" : "b7b8f9e59b6ccd3a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/218//#testresult/b7b8f9e59b6ccd3a",
        "status" : "passed",
        "time" : {
          "start" : 1639442046047,
          "stop" : 1639442050331,
          "duration" : 4284
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "598f5cb38d147589.json",
  "parameterValues" : [ ]
}