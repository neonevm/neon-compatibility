{
  "uid" : "8885b2bf40450776",
  "name" : "test_sender_balance_decreases",
  "fullName" : "tests.brownie.token.tests.test_transfer#test_sender_balance_decreases",
  "historyId" : "39fc04ca56c2456dd536d714e4310f55",
  "time" : {
    "start" : 1639663141220,
    "stop" : 1639663141220,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "brownie_project = <Project 'TokenProject'>\naccounts = <brownie.network.account.Accounts object at 0x7fd26f7fb5b0>\n\n    @pytest.fixture(scope=\"module\")\n    def token(brownie_project, accounts):\n>       return brownie_project.Token.deploy(\"Test Token\", \"TST\", 18, 1e21, {'from': accounts[0]})\n\ntests/brownie/token/tests/conftest.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "token",
    "time" : {
      "start" : 1639663141220,
      "stop" : 1639663141626,
      "duration" : 406
    },
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n",
    "statusTrace" : "  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/_pytest/fixtures.py\", line 932, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/neon-compatibility/neon-compatibility/tests/brownie/token/tests/conftest.py\", line 49, in token\n    return brownie_project.Token.deploy(\"Test Token\", \"TST\", 18, 1e21, {'from': accounts[0]})\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py\", line 600, in __call__\n    return tx[\"from\"].deploy(\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py\", line 508, in deploy\n    receipt, exc = self._make_transaction(\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py\", line 725, in _make_transaction\n    raise VirtualMachineError(e) from None\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py\", line 121, in __init__\n    raise ValueError(str(exc)) from None\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transfer"
  }, {
    "name" : "host",
    "value" : "fv-az77-691"
  }, {
    "name" : "thread",
    "value" : "4499-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transfer"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 25,
        "skipped" : 0,
        "passed" : 78,
        "unknown" : 0,
        "total" : 103
      },
      "items" : [ {
        "uid" : "c6de35bd732aed92",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/241//#testresult/c6de35bd732aed92",
        "status" : "passed",
        "time" : {
          "start" : 1639661313076,
          "stop" : 1639661316253,
          "duration" : 3177
        }
      }, {
        "uid" : "c4f7eccd6c761636",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/238//#testresult/c4f7eccd6c761636",
        "status" : "passed",
        "time" : {
          "start" : 1639651812968,
          "stop" : 1639651815981,
          "duration" : 3013
        }
      }, {
        "uid" : "bbfd56fd6a4660ac",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/237//#testresult/bbfd56fd6a4660ac",
        "status" : "passed",
        "time" : {
          "start" : 1639648265477,
          "stop" : 1639648268441,
          "duration" : 2964
        }
      }, {
        "uid" : "c76ef057d1572bb1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/236//#testresult/c76ef057d1572bb1",
        "status" : "passed",
        "time" : {
          "start" : 1639645608551,
          "stop" : 1639645612550,
          "duration" : 3999
        }
      }, {
        "uid" : "8be7353520543950",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/235//#testresult/8be7353520543950",
        "status" : "passed",
        "time" : {
          "start" : 1639643185264,
          "stop" : 1639643188851,
          "duration" : 3587
        }
      }, {
        "uid" : "a746f68aa87962a2",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/234//#testresult/a746f68aa87962a2",
        "status" : "passed",
        "time" : {
          "start" : 1639632934744,
          "stop" : 1639632936984,
          "duration" : 2240
        }
      }, {
        "uid" : "f5b2864a657d3e6d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/233//#testresult/f5b2864a657d3e6d",
        "status" : "passed",
        "time" : {
          "start" : 1639624482346,
          "stop" : 1639624486035,
          "duration" : 3689
        }
      }, {
        "uid" : "be8beb69ba46e6c1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/232//#testresult/be8beb69ba46e6c1",
        "status" : "passed",
        "time" : {
          "start" : 1639614688106,
          "stop" : 1639614691367,
          "duration" : 3261
        }
      }, {
        "uid" : "1293df35e029f42a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/230//#testresult/1293df35e029f42a",
        "status" : "passed",
        "time" : {
          "start" : 1639590969400,
          "stop" : 1639590972269,
          "duration" : 2869
        }
      }, {
        "uid" : "f6b8d6c6d547098f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/228//#testresult/f6b8d6c6d547098f",
        "status" : "passed",
        "time" : {
          "start" : 1639580747480,
          "stop" : 1639580749751,
          "duration" : 2271
        }
      }, {
        "uid" : "bd6dea5b85f5eca5",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/227//#testresult/bd6dea5b85f5eca5",
        "status" : "passed",
        "time" : {
          "start" : 1639577798209,
          "stop" : 1639577800578,
          "duration" : 2369
        }
      }, {
        "uid" : "c2b80ed1802dff50",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/226//#testresult/c2b80ed1802dff50",
        "status" : "passed",
        "time" : {
          "start" : 1639575102017,
          "stop" : 1639575106488,
          "duration" : 4471
        }
      }, {
        "uid" : "f13a009248a2c337",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/225//#testresult/f13a009248a2c337",
        "status" : "passed",
        "time" : {
          "start" : 1639574787044,
          "stop" : 1639574788864,
          "duration" : 1820
        }
      }, {
        "uid" : "f1ffe6c334469268",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/224//#testresult/f1ffe6c334469268",
        "status" : "passed",
        "time" : {
          "start" : 1639574171964,
          "stop" : 1639574174446,
          "duration" : 2482
        }
      }, {
        "uid" : "d67de5255786c294",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/223//#testresult/d67de5255786c294",
        "status" : "passed",
        "time" : {
          "start" : 1639573360225,
          "stop" : 1639573362350,
          "duration" : 2125
        }
      }, {
        "uid" : "287cf557b2d413de",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/222//#testresult/287cf557b2d413de",
        "status" : "passed",
        "time" : {
          "start" : 1639538022718,
          "stop" : 1639538024926,
          "duration" : 2208
        }
      }, {
        "uid" : "dbb0473b3a1a4814",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/221//#testresult/dbb0473b3a1a4814",
        "status" : "passed",
        "time" : {
          "start" : 1639528342828,
          "stop" : 1639528344994,
          "duration" : 2166
        }
      }, {
        "uid" : "a76d0d13ad7b3cb0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/220//#testresult/a76d0d13ad7b3cb0",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f2d30576fd0>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639461402784,
          "stop" : 1639461402784,
          "duration" : 0
        }
      }, {
        "uid" : "96d85bfc2243f8c7",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/219//#testresult/96d85bfc2243f8c7",
        "status" : "passed",
        "time" : {
          "start" : 1639451584598,
          "stop" : 1639451586801,
          "duration" : 2203
        }
      }, {
        "uid" : "995bb732fc065205",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/218//#testresult/995bb732fc065205",
        "status" : "passed",
        "time" : {
          "start" : 1639442013769,
          "stop" : 1639442015934,
          "duration" : 2165
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "8885b2bf40450776.json",
  "parameterValues" : [ ]
}