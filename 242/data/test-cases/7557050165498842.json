{
  "uid" : "7557050165498842",
  "name" : "test_sender_balance_decreases",
  "fullName" : "tests.brownie.token.tests.test_transferFrom#test_sender_balance_decreases",
  "historyId" : "cdd38f2d3ff74f7c9e250618c4f315b0",
  "time" : {
    "start" : 1639663142378,
    "stop" : 1639663142378,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "brownie_project = <Project 'TokenProject'>\naccounts = <brownie.network.account.Accounts object at 0x7fd26f7fb5b0>\n\n    @pytest.fixture(scope=\"module\")\n    def token(brownie_project, accounts):\n>       return brownie_project.Token.deploy(\"Test Token\", \"TST\", 18, 1e21, {'from': accounts[0]})\n\ntests/brownie/token/tests/conftest.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "token",
    "time" : {
      "start" : 1639663142378,
      "stop" : 1639663142795,
      "duration" : 417
    },
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n",
    "statusTrace" : "  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/_pytest/fixtures.py\", line 932, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/neon-compatibility/neon-compatibility/tests/brownie/token/tests/conftest.py\", line 49, in token\n    return brownie_project.Token.deploy(\"Test Token\", \"TST\", 18, 1e21, {'from': accounts[0]})\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py\", line 600, in __call__\n    return tx[\"from\"].deploy(\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py\", line 508, in deploy\n    receipt, exc = self._make_transaction(\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py\", line 725, in _make_transaction\n    raise VirtualMachineError(e) from None\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py\", line 121, in __init__\n    raise ValueError(str(exc)) from None\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transferFrom"
  }, {
    "name" : "host",
    "value" : "fv-az77-691"
  }, {
    "name" : "thread",
    "value" : "4499-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transferFrom"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 24,
        "skipped" : 0,
        "passed" : 79,
        "unknown" : 0,
        "total" : 103
      },
      "items" : [ {
        "uid" : "a0d8b372b0f30ea2",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/241//#testresult/a0d8b372b0f30ea2",
        "status" : "passed",
        "time" : {
          "start" : 1639661349568,
          "stop" : 1639661356945,
          "duration" : 7377
        }
      }, {
        "uid" : "4e2b67b748c340ee",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/238//#testresult/4e2b67b748c340ee",
        "status" : "passed",
        "time" : {
          "start" : 1639651850767,
          "stop" : 1639651857484,
          "duration" : 6717
        }
      }, {
        "uid" : "8c0412927d3b307d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/237//#testresult/8c0412927d3b307d",
        "status" : "passed",
        "time" : {
          "start" : 1639648301677,
          "stop" : 1639648308642,
          "duration" : 6965
        }
      }, {
        "uid" : "47b48f4422503051",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/236//#testresult/47b48f4422503051",
        "status" : "passed",
        "time" : {
          "start" : 1639645644178,
          "stop" : 1639645650035,
          "duration" : 5857
        }
      }, {
        "uid" : "5d6b3e1b08568f3e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/235//#testresult/5d6b3e1b08568f3e",
        "status" : "passed",
        "time" : {
          "start" : 1639643220216,
          "stop" : 1639643225982,
          "duration" : 5766
        }
      }, {
        "uid" : "ec6dfb47ee198ea2",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/234//#testresult/ec6dfb47ee198ea2",
        "status" : "passed",
        "time" : {
          "start" : 1639632958725,
          "stop" : 1639632963149,
          "duration" : 4424
        }
      }, {
        "uid" : "c6f8bbf7694da65d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/233//#testresult/c6f8bbf7694da65d",
        "status" : "passed",
        "time" : {
          "start" : 1639624520094,
          "stop" : 1639624527577,
          "duration" : 7483
        }
      }, {
        "uid" : "54060cd009f6b262",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/232//#testresult/54060cd009f6b262",
        "status" : "passed",
        "time" : {
          "start" : 1639614721625,
          "stop" : 1639614727657,
          "duration" : 6032
        }
      }, {
        "uid" : "17a1892ba2dcda6f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/230//#testresult/17a1892ba2dcda6f",
        "status" : "passed",
        "time" : {
          "start" : 1639591000798,
          "stop" : 1639591008449,
          "duration" : 7651
        }
      }, {
        "uid" : "182a2097294bae17",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/228//#testresult/182a2097294bae17",
        "status" : "passed",
        "time" : {
          "start" : 1639580771120,
          "stop" : 1639580775226,
          "duration" : 4106
        }
      }, {
        "uid" : "e921f4cb8901a69",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/227//#testresult/e921f4cb8901a69",
        "status" : "passed",
        "time" : {
          "start" : 1639577826687,
          "stop" : 1639577833585,
          "duration" : 6898
        }
      }, {
        "uid" : "508f7d3b9bc92a68",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/226//#testresult/508f7d3b9bc92a68",
        "status" : "passed",
        "time" : {
          "start" : 1639575132491,
          "stop" : 1639575137571,
          "duration" : 5080
        }
      }, {
        "uid" : "865ca4ae94b61dcc",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/225//#testresult/865ca4ae94b61dcc",
        "status" : "passed",
        "time" : {
          "start" : 1639574808457,
          "stop" : 1639574811661,
          "duration" : 3204
        }
      }, {
        "uid" : "8fe87cbba407d9d3",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/224//#testresult/8fe87cbba407d9d3",
        "status" : "passed",
        "time" : {
          "start" : 1639574196560,
          "stop" : 1639574200839,
          "duration" : 4279
        }
      }, {
        "uid" : "444ba8bf1050b373",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/223//#testresult/444ba8bf1050b373",
        "status" : "passed",
        "time" : {
          "start" : 1639573385323,
          "stop" : 1639573389512,
          "duration" : 4189
        }
      }, {
        "uid" : "60d0632c51b12e9b",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/222//#testresult/60d0632c51b12e9b",
        "status" : "passed",
        "time" : {
          "start" : 1639538048387,
          "stop" : 1639538053076,
          "duration" : 4689
        }
      }, {
        "uid" : "58fc5ed4920abfc6",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/221//#testresult/58fc5ed4920abfc6",
        "status" : "passed",
        "time" : {
          "start" : 1639528365310,
          "stop" : 1639528369668,
          "duration" : 4358
        }
      }, {
        "uid" : "8099bc25048659c0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/220//#testresult/8099bc25048659c0",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f2d32d908e0>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639461403816,
          "stop" : 1639461403816,
          "duration" : 0
        }
      }, {
        "uid" : "49648d96e85bbd99",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/219//#testresult/49648d96e85bbd99",
        "status" : "passed",
        "time" : {
          "start" : 1639451608441,
          "stop" : 1639451612784,
          "duration" : 4343
        }
      }, {
        "uid" : "5dfb9c10d6dfd5b8",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/218//#testresult/5dfb9c10d6dfd5b8",
        "status" : "passed",
        "time" : {
          "start" : 1639442037676,
          "stop" : 1639442041964,
          "duration" : 4288
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "7557050165498842.json",
  "parameterValues" : [ ]
}