{
  "uid" : "f25f772720e52d2a",
  "name" : "test_brownie_deploy",
  "fullName" : "tests.brownie.test_brownie#test_brownie_deploy",
  "historyId" : "6e83a925951bfd8b9c39b6ea82974dc9",
  "time" : {
    "start" : 1639663138781,
    "stop" : 1639663139178,
    "duration" : 397
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "brownie_project = <Project 'TokenProject'>\n\n    def test_brownie_deploy(brownie_project):\n>       deployed_contract = brownie_project.Token.deploy(\n            \"Test deploy\", \"TST\", 10, 10000000, {\"from\": accounts[0]}\n        )\n\ntests/brownie/test_brownie.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
    "statusTrace" : "brownie_project = <Project 'TokenProject'>\n\n    def test_brownie_deploy(brownie_project):\n>       deployed_contract = brownie_project.Token.deploy(\n            \"Test deploy\", \"TST\", 10, 10000000, {\"from\": accounts[0]}\n        )\n\ntests/brownie/test_brownie.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e94574fa3042c11f",
      "name" : "log",
      "source" : "e94574fa3042c11f.txt",
      "type" : "text/plain",
      "size" : 287
    }, {
      "uid" : "551d27318aa11cb",
      "name" : "stdout",
      "source" : "551d27318aa11cb.txt",
      "type" : "text/plain",
      "size" : 251
    }, {
      "uid" : "bf91c3632df7d7b0",
      "name" : "stderr",
      "source" : "bf91c3632df7d7b0.txt",
      "type" : "text/plain",
      "size" : 8602
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie"
  }, {
    "name" : "suite",
    "value" : "test_brownie"
  }, {
    "name" : "host",
    "value" : "fv-az77-691"
  }, {
    "name" : "thread",
    "value" : "4499-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.test_brownie"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 17,
        "skipped" : 0,
        "passed" : 86,
        "unknown" : 0,
        "total" : 103
      },
      "items" : [ {
        "uid" : "a3f99ea0dc70111",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/241//#testresult/a3f99ea0dc70111",
        "status" : "passed",
        "time" : {
          "start" : 1639661267834,
          "stop" : 1639661273094,
          "duration" : 5260
        }
      }, {
        "uid" : "4df132bf53c3e832",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/238//#testresult/4df132bf53c3e832",
        "status" : "passed",
        "time" : {
          "start" : 1639651767866,
          "stop" : 1639651774781,
          "duration" : 6915
        }
      }, {
        "uid" : "523e836a676280d5",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/237//#testresult/523e836a676280d5",
        "status" : "passed",
        "time" : {
          "start" : 1639648220192,
          "stop" : 1639648226797,
          "duration" : 6605
        }
      }, {
        "uid" : "650d7558ef084ae",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/236//#testresult/650d7558ef084ae",
        "status" : "passed",
        "time" : {
          "start" : 1639645563924,
          "stop" : 1639645570607,
          "duration" : 6683
        }
      }, {
        "uid" : "863cedb857420976",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/235//#testresult/863cedb857420976",
        "status" : "passed",
        "time" : {
          "start" : 1639643135951,
          "stop" : 1639643143494,
          "duration" : 7543
        }
      }, {
        "uid" : "7b1c597b041c9303",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/234//#testresult/7b1c597b041c9303",
        "status" : "passed",
        "time" : {
          "start" : 1639632903559,
          "stop" : 1639632907530,
          "duration" : 3971
        }
      }, {
        "uid" : "5956b2e9b6bf25a8",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/233//#testresult/5956b2e9b6bf25a8",
        "status" : "passed",
        "time" : {
          "start" : 1639624437120,
          "stop" : 1639624444048,
          "duration" : 6928
        }
      }, {
        "uid" : "6ada061d466dd073",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/232//#testresult/6ada061d466dd073",
        "status" : "passed",
        "time" : {
          "start" : 1639614645351,
          "stop" : 1639614650313,
          "duration" : 4962
        }
      }, {
        "uid" : "b793c7cfe11a7f98",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/230//#testresult/b793c7cfe11a7f98",
        "status" : "passed",
        "time" : {
          "start" : 1639590924983,
          "stop" : 1639590930114,
          "duration" : 5131
        }
      }, {
        "uid" : "e2aac51676ad0a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/228//#testresult/e2aac51676ad0a",
        "status" : "passed",
        "time" : {
          "start" : 1639580715266,
          "stop" : 1639580719223,
          "duration" : 3957
        }
      }, {
        "uid" : "bb93bd51d8339bca",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/227//#testresult/bb93bd51d8339bca",
        "status" : "passed",
        "time" : {
          "start" : 1639577757154,
          "stop" : 1639577764980,
          "duration" : 7826
        }
      }, {
        "uid" : "f470e2a312f82e28",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/226//#testresult/f470e2a312f82e28",
        "status" : "passed",
        "time" : {
          "start" : 1639575068310,
          "stop" : 1639575072801,
          "duration" : 4491
        }
      }, {
        "uid" : "6debfee98a272d36",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/225//#testresult/6debfee98a272d36",
        "status" : "passed",
        "time" : {
          "start" : 1639574762764,
          "stop" : 1639574766115,
          "duration" : 3351
        }
      }, {
        "uid" : "6940309ce5cac9d1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/224//#testresult/6940309ce5cac9d1",
        "status" : "passed",
        "time" : {
          "start" : 1639574139490,
          "stop" : 1639574143932,
          "duration" : 4442
        }
      }, {
        "uid" : "2fed1d3b19d06272",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/223//#testresult/2fed1d3b19d06272",
        "status" : "passed",
        "time" : {
          "start" : 1639573328594,
          "stop" : 1639573332480,
          "duration" : 3886
        }
      }, {
        "uid" : "6ae4cee35f53c058",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/222//#testresult/6ae4cee35f53c058",
        "status" : "passed",
        "time" : {
          "start" : 1639537989952,
          "stop" : 1639537994046,
          "duration" : 4094
        }
      }, {
        "uid" : "496e570a912fc8aa",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/221//#testresult/496e570a912fc8aa",
        "status" : "passed",
        "time" : {
          "start" : 1639528313374,
          "stop" : 1639528316935,
          "duration" : 3561
        }
      }, {
        "uid" : "89828e2aff35d48b",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/220//#testresult/89828e2aff35d48b",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f2d32e26d30>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639461400749,
          "stop" : 1639461401016,
          "duration" : 267
        }
      }, {
        "uid" : "9d101b0ece672e78",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/219//#testresult/9d101b0ece672e78",
        "status" : "passed",
        "time" : {
          "start" : 1639451554218,
          "stop" : 1639451558201,
          "duration" : 3983
        }
      }, {
        "uid" : "ca2d50eb2f767c7d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/218//#testresult/ca2d50eb2f767c7d",
        "status" : "passed",
        "time" : {
          "start" : 1639441983521,
          "stop" : 1639441987314,
          "duration" : 3793
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "f25f772720e52d2a.json",
  "parameterValues" : [ ]
}