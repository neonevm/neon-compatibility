{
  "uid" : "aec823f48cef867",
  "name" : "test_transfer_to_self",
  "fullName" : "tests.brownie.token.tests.test_transfer#test_transfer_to_self",
  "historyId" : "cce1f431a8610d0d4bb26f30bb566f26",
  "time" : {
    "start" : 1639663142167,
    "stop" : 1639663142167,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "brownie_project = <Project 'TokenProject'>\naccounts = <brownie.network.account.Accounts object at 0x7fd26f7fb5b0>\n\n    @pytest.fixture(scope=\"module\")\n    def token(brownie_project, accounts):\n>       return brownie_project.Token.deploy(\"Test Token\", \"TST\", 18, 1e21, {'from': accounts[0]})\n\ntests/brownie/token/tests/conftest.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "token",
    "time" : {
      "start" : 1639663141220,
      "stop" : 1639663141626,
      "duration" : 406
    },
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n",
    "statusTrace" : "  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/_pytest/fixtures.py\", line 932, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/neon-compatibility/neon-compatibility/tests/brownie/token/tests/conftest.py\", line 49, in token\n    return brownie_project.Token.deploy(\"Test Token\", \"TST\", 18, 1e21, {'from': accounts[0]})\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py\", line 600, in __call__\n    return tx[\"from\"].deploy(\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py\", line 508, in deploy\n    receipt, exc = self._make_transaction(\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py\", line 725, in _make_transaction\n    raise VirtualMachineError(e) from None\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py\", line 121, in __init__\n    raise ValueError(str(exc)) from None\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transfer"
  }, {
    "name" : "host",
    "value" : "fv-az77-691"
  }, {
    "name" : "thread",
    "value" : "4499-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transfer"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 24,
        "skipped" : 0,
        "passed" : 79,
        "unknown" : 0,
        "total" : 103
      },
      "items" : [ {
        "uid" : "71aa11e45fd0e86b",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/241//#testresult/71aa11e45fd0e86b",
        "status" : "passed",
        "time" : {
          "start" : 1639661335064,
          "stop" : 1639661339561,
          "duration" : 4497
        }
      }, {
        "uid" : "d9e531858a7f1bda",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/238//#testresult/d9e531858a7f1bda",
        "status" : "passed",
        "time" : {
          "start" : 1639651838540,
          "stop" : 1639651842371,
          "duration" : 3831
        }
      }, {
        "uid" : "299822daf1243c00",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/237//#testresult/299822daf1243c00",
        "status" : "passed",
        "time" : {
          "start" : 1639648287966,
          "stop" : 1639648291997,
          "duration" : 4031
        }
      }, {
        "uid" : "d6e5b491f88a1472",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/236//#testresult/d6e5b491f88a1472",
        "status" : "passed",
        "time" : {
          "start" : 1639645631895,
          "stop" : 1639645635716,
          "duration" : 3821
        }
      }, {
        "uid" : "35a4146dae46bf8c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/235//#testresult/35a4146dae46bf8c",
        "status" : "passed",
        "time" : {
          "start" : 1639643209291,
          "stop" : 1639643212728,
          "duration" : 3437
        }
      }, {
        "uid" : "b89a5220bfe2b1fb",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/234//#testresult/b89a5220bfe2b1fb",
        "status" : "passed",
        "time" : {
          "start" : 1639632949836,
          "stop" : 1639632952377,
          "duration" : 2541
        }
      }, {
        "uid" : "2e32175127639a01",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/233//#testresult/2e32175127639a01",
        "status" : "passed",
        "time" : {
          "start" : 1639624508674,
          "stop" : 1639624512079,
          "duration" : 3405
        }
      }, {
        "uid" : "3582bfc89780790c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/232//#testresult/3582bfc89780790c",
        "status" : "passed",
        "time" : {
          "start" : 1639614709016,
          "stop" : 1639614712415,
          "duration" : 3399
        }
      }, {
        "uid" : "25c37af8b8dc7a22",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/230//#testresult/25c37af8b8dc7a22",
        "status" : "passed",
        "time" : {
          "start" : 1639590988399,
          "stop" : 1639590991811,
          "duration" : 3412
        }
      }, {
        "uid" : "29938f1662306817",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/228//#testresult/29938f1662306817",
        "status" : "passed",
        "time" : {
          "start" : 1639580762001,
          "stop" : 1639580764710,
          "duration" : 2709
        }
      }, {
        "uid" : "8435c802174e93",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/227//#testresult/8435c802174e93",
        "status" : "passed",
        "time" : {
          "start" : 1639577816042,
          "stop" : 1639577819265,
          "duration" : 3223
        }
      }, {
        "uid" : "9163c52b6137024c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/226//#testresult/9163c52b6137024c",
        "status" : "passed",
        "time" : {
          "start" : 1639575121278,
          "stop" : 1639575124602,
          "duration" : 3324
        }
      }, {
        "uid" : "f81336bfa61b5cbc",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/225//#testresult/f81336bfa61b5cbc",
        "status" : "passed",
        "time" : {
          "start" : 1639574800845,
          "stop" : 1639574802550,
          "duration" : 1705
        }
      }, {
        "uid" : "80a9b58c9ba9a5bd",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/224//#testresult/80a9b58c9ba9a5bd",
        "status" : "passed",
        "time" : {
          "start" : 1639574187664,
          "stop" : 1639574190342,
          "duration" : 2678
        }
      }, {
        "uid" : "486e2e4c2745cf6e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/223//#testresult/486e2e4c2745cf6e",
        "status" : "passed",
        "time" : {
          "start" : 1639573376381,
          "stop" : 1639573379162,
          "duration" : 2781
        }
      }, {
        "uid" : "1b542aa584b06fcb",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/222//#testresult/1b542aa584b06fcb",
        "status" : "passed",
        "time" : {
          "start" : 1639538038588,
          "stop" : 1639538041342,
          "duration" : 2754
        }
      }, {
        "uid" : "c9511c96885c532b",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/221//#testresult/c9511c96885c532b",
        "status" : "passed",
        "time" : {
          "start" : 1639528356822,
          "stop" : 1639528359158,
          "duration" : 2336
        }
      }, {
        "uid" : "58d679880b9f5e99",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/220//#testresult/58d679880b9f5e99",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f2d30576fd0>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639461403589,
          "stop" : 1639461403589,
          "duration" : 0
        }
      }, {
        "uid" : "6f0a6132d685da1e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/219//#testresult/6f0a6132d685da1e",
        "status" : "passed",
        "time" : {
          "start" : 1639451599049,
          "stop" : 1639451602320,
          "duration" : 3271
        }
      }, {
        "uid" : "22f973a5d083338",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/218//#testresult/22f973a5d083338",
        "status" : "passed",
        "time" : {
          "start" : 1639442028740,
          "stop" : 1639442031394,
          "duration" : 2654
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "aec823f48cef867.json",
  "parameterValues" : [ ]
}