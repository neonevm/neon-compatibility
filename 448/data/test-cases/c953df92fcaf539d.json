{
  "uid" : "c953df92fcaf539d",
  "name" : "test_transfer_event_fires",
  "fullName" : "tests.brownie.token.tests.test_transferFrom#test_transfer_event_fires",
  "historyId" : "928ffb81b12f37ad66f1eb91299aed9a",
  "time" : {
    "start" : 1641698391881,
    "stop" : 1641698427448,
    "duration" : 35567
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Verifying nonce before send transaction: Error processing Instruction 1: invalid program argument",
  "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f58d5600790>\ntoken = <Token Contract '0xa5c3677aE19239e40DCfC0E645c94F341BcCDbBE'>\n\n    def test_transfer_event_fires(accounts, token):\n        amount = token.balanceOf(accounts[0])\n    \n        token.approve(accounts[1], amount, {'from': accounts[0]})\n>       tx = token.transferFrom(accounts[0], accounts[2], amount, {'from': accounts[1]})\n\ntests/brownie/token/tests/test_transferFrom.py:161: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:743: in _make_transaction\n    exc = VirtualMachineError(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError({'code': -32002, 'message': 'Verifying nonce before send transaction: Error processing ...valid program argument', 'data': {'logs': ['/src/entrypoint.rs Invalid Ethereum transaction nonce: acc 13, trx 12']}}))\nexc = {'code': -32002, 'data': {'logs': ['/src/entrypoint.rs Invalid Ethereum transaction nonce: acc 13, trx 12']}, 'message': 'Verifying nonce before send transaction: Error processing Instruction 1: invalid program argument'}\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n>               raise ValueError(exc[\"message\"]) from None\nE               ValueError: Verifying nonce before send transaction: Error processing Instruction 1: invalid program argument\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:104: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1641698067182,
      "stop" : 1641698067182,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1641698068117,
      "stop" : 1641698085022,
      "duration" : 16905
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1641698098281,
      "stop" : 1641698098282,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1641698098282,
      "stop" : 1641698098556,
      "duration" : 274
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1641698243936,
      "stop" : 1641698245944,
      "duration" : 2008
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: Verifying nonce before send transaction: Error processing Instruction 1: invalid program argument",
    "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f58d5600790>\ntoken = <Token Contract '0xa5c3677aE19239e40DCfC0E645c94F341BcCDbBE'>\n\n    def test_transfer_event_fires(accounts, token):\n        amount = token.balanceOf(accounts[0])\n    \n        token.approve(accounts[1], amount, {'from': accounts[0]})\n>       tx = token.transferFrom(accounts[0], accounts[2], amount, {'from': accounts[1]})\n\ntests/brownie/token/tests/test_transferFrom.py:161: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:743: in _make_transaction\n    exc = VirtualMachineError(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError({'code': -32002, 'message': 'Verifying nonce before send transaction: Error processing ...valid program argument', 'data': {'logs': ['/src/entrypoint.rs Invalid Ethereum transaction nonce: acc 13, trx 12']}}))\nexc = {'code': -32002, 'data': {'logs': ['/src/entrypoint.rs Invalid Ethereum transaction nonce: acc 13, trx 12']}, 'message': 'Verifying nonce before send transaction: Error processing Instruction 1: invalid program argument'}\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n>               raise ValueError(exc[\"message\"]) from None\nE               ValueError: Verifying nonce before send transaction: Error processing Instruction 1: invalid program argument\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:104: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6594781f3871b99b",
      "name" : "stdout",
      "source" : "6594781f3871b99b.txt",
      "type" : "text/plain",
      "size" : 309
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1641698620202,
      "stop" : 1641698620202,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transferFrom"
  }, {
    "name" : "host",
    "value" : "fv-az28-122"
  }, {
    "name" : "thread",
    "value" : "3580-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transferFrom"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 8,
        "skipped" : 0,
        "passed" : 56,
        "unknown" : 0,
        "total" : 64
      },
      "items" : [ {
        "uid" : "5929f02e42800daa",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/447//#testresult/5929f02e42800daa",
        "status" : "passed",
        "time" : {
          "start" : 1641688966535,
          "stop" : 1641688970707,
          "duration" : 4172
        }
      }, {
        "uid" : "d70b92eb703c5726",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/446//#testresult/d70b92eb703c5726",
        "status" : "passed",
        "time" : {
          "start" : 1641612044595,
          "stop" : 1641612074704,
          "duration" : 30109
        }
      }, {
        "uid" : "76e36803373e0443",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/445//#testresult/76e36803373e0443",
        "status" : "passed",
        "time" : {
          "start" : 1641602299425,
          "stop" : 1641602328461,
          "duration" : 29036
        }
      }, {
        "uid" : "51e612a87827c2b6",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/441//#testresult/51e612a87827c2b6",
        "status" : "passed",
        "time" : {
          "start" : 1641525655813,
          "stop" : 1641525659866,
          "duration" : 4053
        }
      }, {
        "uid" : "4f87a3503771ff4",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/440//#testresult/4f87a3503771ff4",
        "status" : "passed",
        "time" : {
          "start" : 1641515833867,
          "stop" : 1641515837214,
          "duration" : 3347
        }
      }, {
        "uid" : "3991bbfa88c2a48",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/434//#testresult/3991bbfa88c2a48",
        "status" : "passed",
        "time" : {
          "start" : 1641439146992,
          "stop" : 1641439151105,
          "duration" : 4113
        }
      }, {
        "uid" : "34f61a8b587f800",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/432//#testresult/34f61a8b587f800",
        "status" : "passed",
        "time" : {
          "start" : 1641429491874,
          "stop" : 1641429496316,
          "duration" : 4442
        }
      }, {
        "uid" : "4def75e5db9ec658",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/431//#testresult/4def75e5db9ec658",
        "status" : "passed",
        "time" : {
          "start" : 1641394171662,
          "stop" : 1641394175780,
          "duration" : 4118
        }
      }, {
        "uid" : "270e54d494d43d2b",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/424//#testresult/270e54d494d43d2b",
        "status" : "passed",
        "time" : {
          "start" : 1641369866406,
          "stop" : 1641369870874,
          "duration" : 4468
        }
      }, {
        "uid" : "7b549f2c0cf71894",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/424//#testresult/7b549f2c0cf71894",
        "status" : "passed",
        "time" : {
          "start" : 1641352541248,
          "stop" : 1641352545290,
          "duration" : 4042
        }
      }, {
        "uid" : "dd5babc636826c91",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/422//#testresult/dd5babc636826c91",
        "status" : "passed",
        "time" : {
          "start" : 1641343014955,
          "stop" : 1641343019493,
          "duration" : 4538
        }
      }, {
        "uid" : "36fe2024aa435fbd",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/415//#testresult/36fe2024aa435fbd",
        "status" : "passed",
        "time" : {
          "start" : 1641266086126,
          "stop" : 1641266089345,
          "duration" : 3219
        }
      }, {
        "uid" : "e9495c1f3f029a91",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/414//#testresult/e9495c1f3f029a91",
        "status" : "passed",
        "time" : {
          "start" : 1641256581250,
          "stop" : 1641256585777,
          "duration" : 4527
        }
      }, {
        "uid" : "974106da560804e7",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/413//#testresult/974106da560804e7",
        "status" : "passed",
        "time" : {
          "start" : 1641247488847,
          "stop" : 1641247493138,
          "duration" : 4291
        }
      }, {
        "uid" : "338fcceec9cb8be3",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/412//#testresult/338fcceec9cb8be3",
        "status" : "passed",
        "time" : {
          "start" : 1641243340610,
          "stop" : 1641243345172,
          "duration" : 4562
        }
      }, {
        "uid" : "ce5b4bd5b6f481a0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/411//#testresult/ce5b4bd5b6f481a0",
        "status" : "passed",
        "time" : {
          "start" : 1641240403210,
          "stop" : 1641240408389,
          "duration" : 5179
        }
      }, {
        "uid" : "63a84f7dbafa82d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/410//#testresult/63a84f7dbafa82d",
        "status" : "passed",
        "time" : {
          "start" : 1641234913015,
          "stop" : 1641234917410,
          "duration" : 4395
        }
      }, {
        "uid" : "b54febf0d8fbefdf",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/409//#testresult/b54febf0d8fbefdf",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://proxy.teststand2.neontest.xyz/solana",
        "time" : {
          "start" : 1641231492066,
          "stop" : 1641231492066,
          "duration" : 0
        }
      }, {
        "uid" : "e17fee7a7e596e13",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/408//#testresult/e17fee7a7e596e13",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://proxy.teststand2.neontest.xyz/solana",
        "time" : {
          "start" : 1641225798058,
          "stop" : 1641225798058,
          "duration" : 0
        }
      }, {
        "uid" : "3683f0c1b4ab29e9",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/405//#testresult/3683f0c1b4ab29e9",
        "status" : "broken",
        "statusDetails" : "ValueError: Failed trying 10 times to get Blockhash for transaction {'fee_payer': None, 'instructions': [TransactionInstruction(keys=[AccountMeta(pubkey='KeccakSecp256k11111111111111111111111111111', is_signer=False, is_writable=False)], program_id='KeccakSecp256k11111111111111111111111111111', data=b'\\x01\\x19\\x00\\x01\\x05\\x00\\x01Z\\x00f\\x00\\x01'), TransactionInstruction(keys=[AccountMeta(pubkey='Sysvar1nstructions1111111111111111111111111', is_signer=False, is_writable=False), AccountMeta(pubkey=BMp6gEnveANdvSvspESJUrNczuHz1GF5UQKjVLCkAZih, is_signer=True, is_writable=True), AccountMeta(pubkey=FQnu9avZdLt41reMdFFbJ4f3joGvmYUUSA7mE79w2dLj, is_signer=False, is_writable=True), AccountMeta(pubkey=HX14J4Pp9CgSbWP13Dtpm8VLJpNxMYffLtRCRGsx7Edv, is_signer=False, is_writable=True), AccountMeta(pubkey=H4mgVh8ekEoaCeKMRiDbRBqNwex118LHxfU8JVgz9sXk, is_signer=False, is_writable=True), AccountMeta(pubkey=11111111111111111111111111111111, is_signer=False, is_writable=False), AccountMeta(pubkey=FdKkj9DYtPtoyuDBST96sGWfCfw2RfCLrXXrF94Tb83g, is_signer=False, is_writable=True), AccountMeta(pubkey=FBVqRr8ChNoPmvsCpuDEFhR73kEdRNpZHVS7jYZpr9Fp, is_signer=False, is_writable=True), AccountMeta(pubkey=12rEZ57NwzmoyPNE6Wt4jrbHYBTqfdcMeiqKWSYwsoCz, is_signer=False, is_writable=True), AccountMeta(pubkey='53DfF883gyixYNXnM7s5xhdeyV8mVk9T4i2hGV9vG9io', is_signer=False, is_writable=False), AccountMeta(pubkey=TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA, is_signer=False, is_writable=False)], program_id='53DfF883gyixYNXnM7s5xhdeyV8mVk9T4i2hGV9vG9io', data=bytearray(b\"\\x05\\x03\\x00\\x00\\x00\\xd4\\x00\\xab\\x8d\\x93x\\rf\\xedK\\x93u\\x1b\\x9c\\xfa\\\\})d\\xf9{M\\xeb\\x0cr<\\xbe\\xa8\\x0b\\x1b\\xd9\\xb5-t`\\xc3\\xa9(\\xa8\\xdb\\t\\xc5H\\xd4\\xb9\\x05|\\xd5\\x07i\\x02\\xf5\\n\\x833S\\x81}U\\x9bk\\x12\\x9d9\\x1d\\x0e\\x16\\xa6\\x87\\'\\'n\\x82\\xe1z\\xa2e\\xc4)\\xb2\\xfc\\xad%\\x8b\\x01\\xf8d%\\x80\\x82~\\x96\\x94],1\\xac\\x81C\\xc9\\xc7\\xc8\\xd1\\r\\xdcw\\xb4g\\xf6\\xe9w\\x9d\\x16\\x80\\xb8D\\t^\\xa7\\xb3\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00%\\xc0\\x06/d\\rO\\xc2E\\xf6\\xa6&\\x1fP\\xc3\\xcd\\xe5\\xe6\\xb1(\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00o\\x80\\x80\"))], 'signatures': [SigPubkeyPair(pubkey=BMp6gEnveANdvSvspESJUrNczuHz1GF5UQKjVLCkAZih, signature=b'\\xb7\\xb1\\x1c\\xf1\\xe8\\x04`\\xcaN\\x80\\x0f\\xa4~\\x855M\\x9aB\\xd2\\x83\\x04\\xf1j)\\xfb\\x11\\xf1zX\\xf9\\x96*Js\\xbe\\x8b#\\xf3\\x86\\xd7X\\xe9ZD\\xa9\\xbc\\xfdP\\x97\\xc3\\x80r\\x12\\xbe\\x99\\xacO+_\\x7fp\\xac\\xb6\\x0e')], 'recent_blockhash': 'EpQ7bjGE6yUV9YmWbt4fsWVxwkjR1z7JXcf9u6nR1qPV', 'nonce_info': None}",
        "time" : {
          "start" : 1641179988164,
          "stop" : 1641180014020,
          "duration" : 25856
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "c953df92fcaf539d.json",
  "parameterValues" : [ ]
}