name: "Run compatibility tests (python, node.js, openzeppelin)"

on:
  schedule:
    - cron: "0 0,3 * * *"
  workflow_dispatch:
    inputs:
      network:
        type: choice
        default: night-stand
        required: true
        description: "Network (devnet, testnet, release-stand, night-stand, aws, ropsten, rinkeby)"
        options:
          - night-stand
          - release-stand
          - devnet
          - testnet
          - devnet-aws
          - ropsten
          - rinkeby
      runner:
        type: choice
        default: neon-hosted
        required: true
        description: "Where to run openzeppelin tests (self-hosted, ubuntu-20.04)"
        options:
          - neon-hosted
          - aws-hosted
          - ubuntu-20.04
      jobsNumber:
        description: "Number of jobs in GNU Parallel"
        required: true
        default: "8"

env:
  JOBS_NUMBER: "8"
  NETWORK: night-stand
  RUNNER: neon-hosted

jobs:
  prepare-env:
    runs-on: ubuntu-20.04
    if: always()
    steps:
      - name: Setup env
        id: setup
        run: |
          # $1 - inputs
          # $2 - env.VAR
          function setVar {
            if [ -z "$1" ]
              then
                RESULT="$2"
              else
                RESULT="$1"
            fi
            echo $RESULT
          }

          NETWORK=$( setVar "${{ github.event.inputs.network }}" "${{ env.NETWORK }}" )
          RUNNER=$( setVar "${{ github.event.inputs.runner }}" "${{ env.RUNNER }}" )
          JOBS_NUMBER=$( setVar "${{ github.event.inputs.jobsNumber }}" "${{ env.JOBS_NUMBER }}" )
          
          echo "Network: ${NETWORK}"
          echo "Runner: ${RUNNER}"
          echo "Jobs: ${JOBS_NUMBER}"
          echo "::set-output name=network::${NETWORK}"
          echo "::set-output name=runner::${RUNNER}"
          echo "::set-output name=jobs::${JOBS_NUMBER}"
    outputs:
      network: ${{ steps.setup.outputs.network }}
      jobs: ${{ steps.setup.outputs.jobs }}
      runner: ${{ steps.setup.outputs.runner }}

  python:
    runs-on: ubuntu-20.04
    if: always()
    needs:
      - prepare-env
    env:
      JOBS_NUMBER: ${{ needs.prepare-env.outputs.jobs }}
      NETWORK: ${{ needs.prepare-env.outputs.network }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Switch network
        run: |
          cp "./.env.$NETWORK" "./.env"
      - name: Install NPM deps
        run: npm i
      - name: Install pipenv
        run: pipx install pipenv
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          cache: "pipenv"
      - run: pipenv install
      - name: Lint with pylint
        run: |
          pipenv run pylint src
          pipenv run pylint tests
      - name: Lint with flake8
        run: |
          pipenv run flake8 ./src
          pipenv run flake8 ./tests
      - name: Test with pytest
        timeout-minutes: 15
        if: always()
        run: |
          pwd
          pipenv run pytest --alluredir=report/allure-results
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: report/allure-results

  openzeppelin:
    timeout-minutes: 360
    runs-on: ${{ needs.prepare-env.outputs.runner }}
    needs:
      - prepare-env
    env:
      JOBS_NUMBER: ${{ needs.prepare-env.outputs.jobs }}
      NETWORK: ${{ needs.prepare-env.outputs.network }}
      RUNNER: ${{ needs.prepare-env.outputs.runner }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/openzeppelin-preparation
      - name: Switch network
        run: |
          cp "./.env.$NETWORK" "./.env"
      - uses: ./.github/actions/allure-environment-data
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: "npm"
      - run: npm ci
        if: always()
      - run: npm run build --if-present
      - name: "Run openzeppelin in parallel"
        timeout-minutes: 350
        run: |
          cd openzeppelin-contracts
          mkdir pout
          npx hardhat compile
          find test -name "*.test.js" | sort | parallel -k --jobs ${{ env.JOBS_NUMBER }} --results pout 'npx hardhat test {}'
      - name: "Verify count of logs"
        if: always()
        run: python3 parallel_report.py
      - name: "Insert feature to allure"
        if: always()
        run: python3 fix_allure.py
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: openzeppelin-contracts/report/allure-results
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: parallel-outputs
          path: openzeppelin-contracts/pout
      - name: Cleanup runner
        if: always()
        run: |
          echo "Cleaning up previous run" 
          rm -rf "${{ github.workspace }}"

  node:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    needs:
      - prepare-env
    env:
      JOBS_NUMBER: ${{ needs.prepare-env.outputs.jobs }}
      NETWORK: ${{ needs.prepare-env.outputs.network }}
    steps:
      - uses: actions/checkout@v2
      - name: Switch network
        run: |
          cp "./.env.$NETWORK" "./.env"
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        if: always()
        with:
          node-version: 16.x
          cache: "npm"
      - run: npm ci
      - run: npm run build --if-present
      - name: Mocha tests
        timeout-minutes: 15
        run: |
          npm run test:ci
          mv ./allure-results/ ./report/
      - name: Hardhat tests
        timeout-minutes: 5
        if: always()
        run: |
          function moveFiles {
            echo "cp -R $1* $2"
            cp -R $1 $2
            # rm -R "$1"
          }
          # cp -R source/* destination/
          # rm -R source/
          npm run test:hardhat:advanced
          # mv ./frameworks/hardhat-advanced/allure-results/ ./report/
          pwd
          moveFiles ./frameworks/hardhat-advanced/report/allure-results/ ./report/
          # npm run test:hardhat:simple
          # mv ./frameworks/hardhat-simple/allure-results/ ./report/
          # moveFiles frameworks/hardhat-simple/allure-results/ ./report/
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: report/allure-results

  allure:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    if: always()
    needs:
      - openzeppelin
      - python
      - node
      - prepare-env
    env:
      JOBS_NUMBER: ${{ needs.prepare-env.outputs.jobs }}
      NETWORK: ${{ needs.prepare-env.outputs.network }}
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2

      - name: Get Allure history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Create a path for report
        run: |
          path=""
          network="${{ env.NETWORK }}"
          ref_name="${{ github.ref_name }}"
          if [[ "$network" != "night-stand" ]]; then
            path="$network"
          fi
          if [[ "$ref_name" != "develop" ]]; then
            if [ ${#path} -gt 0 ]; then
              path="$path/$ref_name"
            else
              path="$ref_name"
            fi
          fi
          echo "ALLURE_SUBDIR=$path" >> $GITHUB_ENV

      - name: Allure Report action from marketplace
        uses: neonlabsorg/allure-report-action@master
        if: always()
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          subfolder: ${{ env.ALLURE_SUBDIR }}
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 100

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history
    outputs:
      subdir: ${{ env.ALLURE_SUBDIR }}

  notification:
    runs-on: ubuntu-20.04
    if: always()
    needs:
      - allure
      - prepare-env
    steps:
      - name: Send a notification to Teams channel
        uses: neonlabsorg/teams-notification-action@1.2
        if: always()
        with:
          hookUrl: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          actionUrl: "https://docs.neon-labs.org/neon-compatibility/${{ needs.allure.outputs.subdir }}/${{ github.run_number }}/"
          title: "OpenZeppelin Contracts Test Suite #${{ github.run_number }}"
          networkName: ${{ needs.prepare-env.outputs.network }}
