name: "Run compatibility tests (python, node.js, openzeppelin)"

on:
  schedule:
    - cron: "0 0,3 * * *"
  workflow_dispatch:
    inputs:
      network:
        type: choice
        default: teststand2
        required: true
        description: "Network (devnet, testnet, teststand, teststand2, neonswap.live, aws, ropsten, rinkeby)"
        options:
          - teststand2
          - teststand
          - devnet
          - testnet
          - neonswap.live
          - aws
          - ropsten
          - rinkeby
      jobsNumber:
        description: "Number of jobs in GNU Parallel"
        required: true
        default: "4"

env:
  JOBS_NUMBER: "4"
  NETWORK: teststand2

jobs:
  prepare-env:
    runs-on: ubuntu-20.04
    steps:
      - name: Setup env
        id: setup
        run: |
          if [ -z "${{ github.event.inputs.network }}" ]
            then
              NETWORK="${{ env.NETWORK }}"
            else
              NETWORK="${{ github.event.inputs.network }}"
          fi
          if [ -z "${{ github.event.inputs.jobsNetwork }}" ]
            then
              JOBS_NUMBER="${{ env.JOBS_NUMBER }}"
            else
              JOBS_NUMBER="${{ github.event.inputs.jobsNumber }}"
          fi 
          echo "Network: ${NETWORK}"
          echo "Jobs: ${JOBS_NUMBER}"
          echo "::set-output name=network::${NETWORK}"
          echo "::set-output name=jobs::${JOBS_NUMBER}"
    outputs:
      network: ${{ steps.setup.outputs.network }}
      jobs: ${{ steps.setup.outputs.jobs }}


  python:
    runs-on: ubuntu-20.04
    needs:
      - prepare-env
    env:
      JOBS_NUMBER: ${{ needs.prepare-env.outputs.jobs }}
      NETWORK: ${{ needs.prepare-env.outputs.network }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Switch network
        run: |
          cp "./.env.$NETWORK" "./.env"
      - name: Install NPM deps
        run: npm i
      - name: Install pipenv
        run: pipx install pipenv
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          cache: "pipenv"
      - run: pipenv install
      - name: Lint with pylint
        run: |
          pipenv run pylint src
          pipenv run pylint tests
      - name: Lint with flake8
        run: |
          pipenv run flake8 ./src
          pipenv run flake8 ./tests
      - name: Test with pytest
        timeout-minutes: 15
        if: always()
        run: |
          pwd
          pipenv run pytest --alluredir=report/allure-results
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: report/allure-results

  openzeppelin:
    timeout-minutes: 360
    runs-on: self-hosted
    needs:
      - prepare-env
    env:
      JOBS_NUMBER: ${{ needs.prepare-env.outputs.jobs }}
      NETWORK: ${{ needs.prepare-env.outputs.network }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/openzeppelin-preparation
      - name: Switch network
        run: |
          cp "./.env.$NETWORK" "./openzeppelin-contracts/.env"
      - uses: ./.github/actions/allure-environment-data
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: "npm"
      - run: npm ci
        if: always()
      - run: npm run build --if-present
      - name: "Run openzeppelin in parallel"
        run: |
          cd openzeppelin-contracts
          cp ../run_parallel.py ./
          cp ../rrrun.sh ./
          chmod +x rrrun.sh
          npx hardhat compile
          python3 run_parallel.py
      - uses: ./.github/actions/allure-postprocessing
        if: always()
        with:
          item-type: epic
          name: OpenZeppelin contracts
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: openzeppelin-contracts/report/allure-results

  node:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    needs:
      - prepare-env
    env:
      JOBS_NUMBER: ${{ needs.prepare-env.outputs.jobs }}
      NETWORK: ${{ needs.prepare-env.outputs.network }}
    steps:
      - uses: actions/checkout@v2
      - name: Switch network
        run: |
          cp "./.env.$NETWORK" "./.env"
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        if: always()
        with:
          node-version: 16.x
          cache: "npm"
      - run: npm ci
      - run: npm run build --if-present
      - name: Mocha tests
        timeout-minutes: 15
        run: |
          npm run test:ci
          mv ./allure-results/ ./report/
      - name: Hardhat tests
        timeout-minutes: 5
        if: always()
        run: |
          function moveFiles {
            echo "cp -R $1* $2"
            cp -R $1 $2
            # rm -R "$1"
          }
          # cp -R source/* destination/
          # rm -R source/
          npm run test:hardhat:advanced
          # mv ./frameworks/hardhat-advanced/allure-results/ ./report/
          pwd
          moveFiles ./frameworks/hardhat-advanced/report/allure-results/ ./report/
          # npm run test:hardhat:simple
          # mv ./frameworks/hardhat-simple/allure-results/ ./report/
          # moveFiles frameworks/hardhat-simple/allure-results/ ./report/
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: report/allure-results

  allure:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    if: always()
    needs:
      - openzeppelin
      - python
      - node
      - prepare-env
    env:
      JOBS_NUMBER: ${{ needs.prepare-env.outputs.jobs }}
      NETWORK: ${{ needs.prepare-env.outputs.network }}
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2

      - name: Get Allure history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Create a path for report
        run: |
          path=""
          network="${{ env.NETWORK }}"
          ref_name="${{ github.ref_name }}"
          if [[ "$network" != "teststand2" ]]; then
            path="$network"
          fi
          if [[ "$ref_name" != "develop" ]]; then
            if [ ${#path} -gt 0 ]; then
              path="$path/$ref_name"
            else
              path="$ref_name"
            fi
          fi
          echo "ALLURE_SUBDIR=$path" >> $GITHUB_ENV

      - name: Allure Report action from marketplace
        uses: neonlabsorg/allure-report-action@master
        if: always()
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          subfolder: ${{ env.ALLURE_SUBDIR }}
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 50

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history

  notification:
    runs-on: ubuntu-20.04
    if: always()
    needs: allure
    env:
      NETWORK_NAME: "teststand2-111"
    steps:
      - uses: actions/checkout@v2
      - name: Setting variables
        run: |
          echo "Tags: ${{ github.event.inputs.tags }}"
          echo "Network: ${{ github.event.inputs.network }}"
          if [ -z "${{ github.event.inputs.network }}" ]
          then
            NETWORK='teststand2'
          else
            NETWORK="${{ github.event.inputs.network }}"
          fi
          echo "NETWORK_NAME=$NETWORK" >> $GITHUB_ENV
          cat $GITHUB_ENV
          echo "NETWORK_NAME=$NETWORK_NAME"
          echo "{{ env.NETWORK_NAME }}=${{ env.NETWORK_NAME }}"
        shell: bash
      - name: Send a notification to Teams channel
        uses: neonlabsorg/teams-notification-action@0.1.1
        if: always()
        with:
          hookUrl: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          actionUrl: "https://docs.neon-labs.org/neon-compatibility/${{ github.run_number }}/"
          title: "OpenZeppelin Contracts Test Suite"
          networkName: ${{ env.NETWORK_NAME }}
  cleaner:
    runs-on: self-hosted
    needs: notification
    if: always()
    steps:
      - name: Cleanup runner
        run: | 
          echo "Cleaning up previous run" rm -rf "${{ github.workspace }}"