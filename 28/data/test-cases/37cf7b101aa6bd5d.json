{
  "uid" : "37cf7b101aa6bd5d",
  "name" : "when the dividend is equal to the divisor",
  "fullName" : "Contract: SafeMath with custom revert message mod modulos correctly.when the dividend is equal to the divisor",
  "historyId" : "1f3c39222d6f3a44fcc7d881b0affdc0",
  "time" : {
    "start" : 1637703322723,
    "stop" : 1637703326245,
    "duration" : 3522
  },
  "description" : "",
  "descriptionHtml" : "",
  "status" : "broken",
  "statusMessage" : "Returned error: HTTPConnectionPool(host='test-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f4384407790>: Failed to establish a new connection: [Errno 99] Cannot assign requested address'))",
  "statusTrace" : "Error: Returned error: HTTPConnectionPool(host='test-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f4384407790>: Failed to establish a new connection: [Errno 99] Cannot assign requested address'))\n                    at Context.<anonymous> (test/utils/math/SafeMath.test.js:20:43)\n                    at processImmediate (node:internal/timers:464:21)",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "OpenZeppelin contracts"
  }, {
    "name" : "suite",
    "value" : "Contract: SafeMath with custom revert message mod modulos correctly"
  }, {
    "name" : "testClass",
    "value" : "Contract: SafeMath with custom revert message mod modulos correctly"
  }, {
    "name" : "testMethod",
    "value" : "when the dividend is equal to the divisor"
  }, {
    "name" : "package",
    "value" : "Contract: SafeMath with custom revert message mod modulos correctly"
  }, {
    "name" : "resultFormat",
    "value" : "allure1"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 5,
        "unknown" : 0,
        "total" : 6
      },
      "items" : [ {
        "uid" : "3abbe749dde66092",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/97//#testresult/3abbe749dde66092",
        "status" : "passed",
        "time" : {
          "start" : 1637694272505,
          "stop" : 1637694278756,
          "duration" : 6251
        }
      }, {
        "uid" : "2f84256ee862e92c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/96//#testresult/2f84256ee862e92c",
        "status" : "passed",
        "time" : {
          "start" : 1637657169209,
          "stop" : 1637657192269,
          "duration" : 23060
        }
      }, {
        "uid" : "9a8b68d5e7b857",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/80//#testresult/9a8b68d5e7b857",
        "status" : "passed",
        "time" : {
          "start" : 1637302979422,
          "stop" : 1637302984049,
          "duration" : 4627
        }
      }, {
        "uid" : "b4a02c18654228f0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/66//#testresult/b4a02c18654228f0",
        "status" : "passed",
        "time" : {
          "start" : 1636770074551,
          "stop" : 1636770078778,
          "duration" : 4227
        }
      }, {
        "uid" : "4d63b6223e8cd39d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/65//#testresult/4d63b6223e8cd39d",
        "status" : "passed",
        "time" : {
          "start" : 1636691971576,
          "stop" : 1636691976170,
          "duration" : 4594
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "37cf7b101aa6bd5d.json",
  "parameterValues" : [ ]
}