{
  "uid" : "e532a9ff0c3e7083",
  "name" : "test_transfer_zero_tokens",
  "fullName" : "tests.brownie.token.tests.test_transferFrom#test_transfer_zero_tokens",
  "historyId" : "712015a3b92bfa1e855577e4791f38fb",
  "time" : {
    "start" : 1641477786540,
    "stop" : 1641477851029,
    "duration" : 64489
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Failed trying 10 times to get Blockhash for transaction {'fee_payer': None, 'instructions': [TransactionInstruction(keys=[AccountMeta(pubkey='KeccakSecp256k11111111111111111111111111111', is_signer=False, is_writable=False)], program_id='KeccakSecp256k11111111111111111111111111111', data=b'\\x01\\x19\\x00\\x01\\x05\\x00\\x01Z\\x00\\x8e\\x00\\x01'), TransactionInstruction(keys=[AccountMeta(pubkey='Sysvar1nstructions1111111111111111111111111', is_signer=False, is_writable=False), AccountMeta(pubkey=EJUKLLjBMhFnkonfn7wcThnHyDewmhVmG9sEuVP9cvF8, is_signer=True, is_writable=True), AccountMeta(pubkey=DdWd7xdeyisPMVrV4jL9wea4cGNbwEcbVT2fa2CPKrNC, is_signer=False, is_writable=True), AccountMeta(pubkey=7CRvHTYiioSbAKkTwERQdTm5mJUAvvVYU51ETgfaxjuK, is_signer=False, is_writable=True), AccountMeta(pubkey=DinWuAdQbEf9LR6vKW2cghjsDu73eLat2sF5c6d9yArV, is_signer=False, is_writable=True), AccountMeta(pubkey=11111111111111111111111111111111, is_signer=False, is_writable=False), AccountMeta(pubkey=51RiT4wdDi3VKawuhGqcUrWT4GG9JkWVWfbsEYXZ7foY, is_signer=False, is_writable=True), AccountMeta(pubkey=5CDkbL4XZTNTfAJTdY59U2CdGAcPdvEqFppmvmhjdJeB, is_signer=False, is_writable=True), AccountMeta(pubkey=GGUcMoiGem1NVHXQpRNBtpF2kNvzwQMQ9xFTsCuRB5J2, is_signer=False, is_writable=True), AccountMeta(pubkey='eeLSJgWzzxrqKv1UxtRVVH8FX3qCQWUs9QuAjJpETGU', is_signer=False, is_writable=False), AccountMeta(pubkey=TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA, is_signer=False, is_writable=False)], program_id='eeLSJgWzzxrqKv1UxtRVVH8FX3qCQWUs9QuAjJpETGU', data=bytearray(b'\\x05\\x02\\x00\\x00\\x00\\x82E(\\x99\\x9e\\xb7\\xf6\\xe2\\xee-\\xd06^h\\xd7\\xfc\\x90\\xb8\\x0c\\xa5\\xfc>^n?\\x06\\x8b\\x87\\x1d\\xb4\\xda\\x82Ac\\xbc\\xc3\\xa8#>\\xb8\\x1b{\\x0b\\x1ds\\x1c\\x97b\\xd0\\xfd7\\'2T?\\x8cw\\xbf\\xb6\"\\x08q\\x12\\x08Od\\xc0g\\xce\\xee\\x13|.T\\xae\\xea\\xaa\\x87[\\x04t<*\\xd5\\x01\\xf8\\x8c\\x08\\x84;\\x9a\\xca\\x00\\x82\\xa9\\xf8\\x94\\nk\\xc2\\xaf\\xb7\\xc3\\xbd\\x9a\\xbf\\xcevO\\xf3e_{)x\\xfal\\x80\\xb8d#\\xb8r\\xdd\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00CzA\\xfb\\x95\\'fK\\x8a\\xc7(\\xb9\\x9b\\xc8H\\'\\xec\\xdc_\\xf3\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd9\\xd7x\\x859C6\\xa3a+6\\x08\\x1ej\\x0c\\xdf\\xc6v]^\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x84\\x0e\\x9a\\xc0\\xdc\\x80\\x80'))], 'signatures': [SigPubkeyPair(pubkey=EJUKLLjBMhFnkonfn7wcThnHyDewmhVmG9sEuVP9cvF8, signature=b'L\\xbc\\x12\\x94H9F\\xaf\\xf3\\xce\\x101\\xb4\\x1c-\\xa5\\x96\\x8b\\x0b80A\\xed\\x90\\xfeD\\xf0q\\x10\\xa9\\t\\'\\xcf1\\xcc\"o9E\\xc9\\xfbqcj\\xd4\\x82)R\\x9a\\xb2\\x1f)\\x06+\\xef\\x94\\xa4\\x1f\\x0e\\xba\\xba\\x7f\\xab\\x0b')], 'recent_blockhash': '9G7RsWMtk9cBjzU3N9HmhKeyHiyvui4TXYrhwHH3Ed27', 'nonce_info': None}",
  "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7fc4608fdd00>\ntoken = <Token Contract '0x0A6bC2AFB7c3BD9aBFcE764fF3655f7B2978fa6c'>\n\n    def test_transfer_zero_tokens(accounts, token):\n        sender_balance = token.balanceOf(accounts[0])\n        receiver_balance = token.balanceOf(accounts[2])\n    \n        token.approve(accounts[1], sender_balance, {'from': accounts[0]})\n>       token.transferFrom(accounts[0], accounts[2], 0, {'from': accounts[1]})\n\ntests/brownie/token/tests/test_transferFrom.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:743: in _make_transaction\n    exc = VirtualMachineError(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError({'code': -32000, 'message': 'Failed trying 10 times to get Blockhash for transaction {\\...a\\\\x7f\\\\xab\\\\x0b\\')], \\'recent_blockhash\\': \\'9G7RsWMtk9cBjzU3N9HmhKeyHiyvui4TXYrhwHH3Ed27\\', \\'nonce_info\\': None}'}))\nexc = {'code': -32000, 'message': \"Failed trying 10 times to get Blockhash for transaction {'fee_payer': None, 'instructions...\\\\xba\\\\xba\\\\x7f\\\\xab\\\\x0b')], 'recent_blockhash': '9G7RsWMtk9cBjzU3N9HmhKeyHiyvui4TXYrhwHH3Ed27', 'nonce_info': None}\"}\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n>               raise ValueError(exc[\"message\"]) from None\nE               ValueError: Failed trying 10 times to get Blockhash for transaction {'fee_payer': None, 'instructions': [TransactionInstruction(keys=[AccountMeta(pubkey='KeccakSecp256k11111111111111111111111111111', is_signer=False, is_writable=False)], program_id='KeccakSecp256k11111111111111111111111111111', data=b'\\x01\\x19\\x00\\x01\\x05\\x00\\x01Z\\x00\\x8e\\x00\\x01'), TransactionInstruction(keys=[AccountMeta(pubkey='Sysvar1nstructions1111111111111111111111111', is_signer=False, is_writable=False), AccountMeta(pubkey=EJUKLLjBMhFnkonfn7wcThnHyDewmhVmG9sEuVP9cvF8, is_signer=True, is_writable=True), AccountMeta(pubkey=DdWd7xdeyisPMVrV4jL9wea4cGNbwEcbVT2fa2CPKrNC, is_signer=False, is_writable=True), AccountMeta(pubkey=7CRvHTYiioSbAKkTwERQdTm5mJUAvvVYU51ETgfaxjuK, is_signer=False, is_writable=True), AccountMeta(pubkey=DinWuAdQbEf9LR6vKW2cghjsDu73eLat2sF5c6d9yArV, is_signer=False, is_writable=True), AccountMeta(pubkey=11111111111111111111111111111111, is_signer=False, is_writable=False), AccountMeta(pubkey=51RiT4wdDi3VKawuhGqcUrWT4GG9JkWVWfbsEYXZ7foY, is_signer=False, is_writable=True), AccountMeta(pubkey=5CDkbL4XZTNTfAJTdY59U2CdGAcPdvEqFppmvmhjdJeB, is_signer=False, is_writable=True), AccountMeta(pubkey=GGUcMoiGem1NVHXQpRNBtpF2kNvzwQMQ9xFTsCuRB5J2, is_signer=False, is_writable=True), AccountMeta(pubkey='eeLSJgWzzxrqKv1UxtRVVH8FX3qCQWUs9QuAjJpETGU', is_signer=False, is_writable=False), AccountMeta(pubkey=TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA, is_signer=False, is_writable=False)], program_id='eeLSJgWzzxrqKv1UxtRVVH8FX3qCQWUs9QuAjJpETGU', data=bytearray(b'\\x05\\x02\\x00\\x00\\x00\\x82E(\\x99\\x9e\\xb7\\xf6\\xe2\\xee-\\xd06^h\\xd7\\xfc\\x90\\xb8\\x0c\\xa5\\xfc>^n?\\x06\\x8b\\x87\\x1d\\xb4\\xda\\x82Ac\\xbc\\xc3\\xa8#>\\xb8\\x1b{\\x0b\\x1ds\\x1c\\x97b\\xd0\\xfd7\\'2T?\\x8cw\\xbf\\xb6\"\\x08q\\x12\\x08Od\\xc0g\\xce\\xee\\x13|.T\\xae\\xea\\xaa\\x87[\\x04t<*\\xd5\\x01\\xf8\\x8c\\x08\\x84;\\x9a\\xca\\x00\\x82\\xa9\\xf8\\x94\\nk\\xc2\\xaf\\xb7\\xc3\\xbd\\x9a\\xbf\\xcevO\\xf3e_{)x\\xfal\\x80\\xb8d#\\xb8r\\xdd\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00CzA\\xfb\\x95\\'fK\\x8a\\xc7(\\xb9\\x9b\\xc8H\\'\\xec\\xdc_\\xf3\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd9\\xd7x\\x859C6\\xa3a+6\\x08\\x1ej\\x0c\\xdf\\xc6v]^\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x84\\x0e\\x9a\\xc0\\xdc\\x80\\x80'))], 'signatures': [SigPubkeyPair(pubkey=EJUKLLjBMhFnkonfn7wcThnHyDewmhVmG9sEuVP9cvF8, signature=b'L\\xbc\\x12\\x94H9F\\xaf\\xf3\\xce\\x101\\xb4\\x1c-\\xa5\\x96\\x8b\\x0b80A\\xed\\x90\\xfeD\\xf0q\\x10\\xa9\\t\\'\\xcf1\\xcc\"o9E\\xc9\\xfbqcj\\xd4\\x82)R\\x9a\\xb2\\x1f)\\x06+\\xef\\x94\\xa4\\x1f\\x0e\\xba\\xba\\x7f\\xab\\x0b')], 'recent_blockhash': '9G7RsWMtk9cBjzU3N9HmhKeyHiyvui4TXYrhwHH3Ed27', 'nonce_info': None}\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:85: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: Failed trying 10 times to get Blockhash for transaction {'fee_payer': None, 'instructions': [TransactionInstruction(keys=[AccountMeta(pubkey='KeccakSecp256k11111111111111111111111111111', is_signer=False, is_writable=False)], program_id='KeccakSecp256k11111111111111111111111111111', data=b'\\x01\\x19\\x00\\x01\\x05\\x00\\x01Z\\x00\\x8e\\x00\\x01'), TransactionInstruction(keys=[AccountMeta(pubkey='Sysvar1nstructions1111111111111111111111111', is_signer=False, is_writable=False), AccountMeta(pubkey=EJUKLLjBMhFnkonfn7wcThnHyDewmhVmG9sEuVP9cvF8, is_signer=True, is_writable=True), AccountMeta(pubkey=DdWd7xdeyisPMVrV4jL9wea4cGNbwEcbVT2fa2CPKrNC, is_signer=False, is_writable=True), AccountMeta(pubkey=7CRvHTYiioSbAKkTwERQdTm5mJUAvvVYU51ETgfaxjuK, is_signer=False, is_writable=True), AccountMeta(pubkey=DinWuAdQbEf9LR6vKW2cghjsDu73eLat2sF5c6d9yArV, is_signer=False, is_writable=True), AccountMeta(pubkey=11111111111111111111111111111111, is_signer=False, is_writable=False), AccountMeta(pubkey=51RiT4wdDi3VKawuhGqcUrWT4GG9JkWVWfbsEYXZ7foY, is_signer=False, is_writable=True), AccountMeta(pubkey=5CDkbL4XZTNTfAJTdY59U2CdGAcPdvEqFppmvmhjdJeB, is_signer=False, is_writable=True), AccountMeta(pubkey=GGUcMoiGem1NVHXQpRNBtpF2kNvzwQMQ9xFTsCuRB5J2, is_signer=False, is_writable=True), AccountMeta(pubkey='eeLSJgWzzxrqKv1UxtRVVH8FX3qCQWUs9QuAjJpETGU', is_signer=False, is_writable=False), AccountMeta(pubkey=TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA, is_signer=False, is_writable=False)], program_id='eeLSJgWzzxrqKv1UxtRVVH8FX3qCQWUs9QuAjJpETGU', data=bytearray(b'\\x05\\x02\\x00\\x00\\x00\\x82E(\\x99\\x9e\\xb7\\xf6\\xe2\\xee-\\xd06^h\\xd7\\xfc\\x90\\xb8\\x0c\\xa5\\xfc>^n?\\x06\\x8b\\x87\\x1d\\xb4\\xda\\x82Ac\\xbc\\xc3\\xa8#>\\xb8\\x1b{\\x0b\\x1ds\\x1c\\x97b\\xd0\\xfd7\\'2T?\\x8cw\\xbf\\xb6\"\\x08q\\x12\\x08Od\\xc0g\\xce\\xee\\x13|.T\\xae\\xea\\xaa\\x87[\\x04t<*\\xd5\\x01\\xf8\\x8c\\x08\\x84;\\x9a\\xca\\x00\\x82\\xa9\\xf8\\x94\\nk\\xc2\\xaf\\xb7\\xc3\\xbd\\x9a\\xbf\\xcevO\\xf3e_{)x\\xfal\\x80\\xb8d#\\xb8r\\xdd\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00CzA\\xfb\\x95\\'fK\\x8a\\xc7(\\xb9\\x9b\\xc8H\\'\\xec\\xdc_\\xf3\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd9\\xd7x\\x859C6\\xa3a+6\\x08\\x1ej\\x0c\\xdf\\xc6v]^\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x84\\x0e\\x9a\\xc0\\xdc\\x80\\x80'))], 'signatures': [SigPubkeyPair(pubkey=EJUKLLjBMhFnkonfn7wcThnHyDewmhVmG9sEuVP9cvF8, signature=b'L\\xbc\\x12\\x94H9F\\xaf\\xf3\\xce\\x101\\xb4\\x1c-\\xa5\\x96\\x8b\\x0b80A\\xed\\x90\\xfeD\\xf0q\\x10\\xa9\\t\\'\\xcf1\\xcc\"o9E\\xc9\\xfbqcj\\xd4\\x82)R\\x9a\\xb2\\x1f)\\x06+\\xef\\x94\\xa4\\x1f\\x0e\\xba\\xba\\x7f\\xab\\x0b')], 'recent_blockhash': '9G7RsWMtk9cBjzU3N9HmhKeyHiyvui4TXYrhwHH3Ed27', 'nonce_info': None}",
    "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7fc4608fdd00>\ntoken = <Token Contract '0x0A6bC2AFB7c3BD9aBFcE764fF3655f7B2978fa6c'>\n\n    def test_transfer_zero_tokens(accounts, token):\n        sender_balance = token.balanceOf(accounts[0])\n        receiver_balance = token.balanceOf(accounts[2])\n    \n        token.approve(accounts[1], sender_balance, {'from': accounts[0]})\n>       token.transferFrom(accounts[0], accounts[2], 0, {'from': accounts[1]})\n\ntests/brownie/token/tests/test_transferFrom.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:743: in _make_transaction\n    exc = VirtualMachineError(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError({'code': -32000, 'message': 'Failed trying 10 times to get Blockhash for transaction {\\...a\\\\x7f\\\\xab\\\\x0b\\')], \\'recent_blockhash\\': \\'9G7RsWMtk9cBjzU3N9HmhKeyHiyvui4TXYrhwHH3Ed27\\', \\'nonce_info\\': None}'}))\nexc = {'code': -32000, 'message': \"Failed trying 10 times to get Blockhash for transaction {'fee_payer': None, 'instructions...\\\\xba\\\\xba\\\\x7f\\\\xab\\\\x0b')], 'recent_blockhash': '9G7RsWMtk9cBjzU3N9HmhKeyHiyvui4TXYrhwHH3Ed27', 'nonce_info': None}\"}\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n>               raise ValueError(exc[\"message\"]) from None\nE               ValueError: Failed trying 10 times to get Blockhash for transaction {'fee_payer': None, 'instructions': [TransactionInstruction(keys=[AccountMeta(pubkey='KeccakSecp256k11111111111111111111111111111', is_signer=False, is_writable=False)], program_id='KeccakSecp256k11111111111111111111111111111', data=b'\\x01\\x19\\x00\\x01\\x05\\x00\\x01Z\\x00\\x8e\\x00\\x01'), TransactionInstruction(keys=[AccountMeta(pubkey='Sysvar1nstructions1111111111111111111111111', is_signer=False, is_writable=False), AccountMeta(pubkey=EJUKLLjBMhFnkonfn7wcThnHyDewmhVmG9sEuVP9cvF8, is_signer=True, is_writable=True), AccountMeta(pubkey=DdWd7xdeyisPMVrV4jL9wea4cGNbwEcbVT2fa2CPKrNC, is_signer=False, is_writable=True), AccountMeta(pubkey=7CRvHTYiioSbAKkTwERQdTm5mJUAvvVYU51ETgfaxjuK, is_signer=False, is_writable=True), AccountMeta(pubkey=DinWuAdQbEf9LR6vKW2cghjsDu73eLat2sF5c6d9yArV, is_signer=False, is_writable=True), AccountMeta(pubkey=11111111111111111111111111111111, is_signer=False, is_writable=False), AccountMeta(pubkey=51RiT4wdDi3VKawuhGqcUrWT4GG9JkWVWfbsEYXZ7foY, is_signer=False, is_writable=True), AccountMeta(pubkey=5CDkbL4XZTNTfAJTdY59U2CdGAcPdvEqFppmvmhjdJeB, is_signer=False, is_writable=True), AccountMeta(pubkey=GGUcMoiGem1NVHXQpRNBtpF2kNvzwQMQ9xFTsCuRB5J2, is_signer=False, is_writable=True), AccountMeta(pubkey='eeLSJgWzzxrqKv1UxtRVVH8FX3qCQWUs9QuAjJpETGU', is_signer=False, is_writable=False), AccountMeta(pubkey=TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA, is_signer=False, is_writable=False)], program_id='eeLSJgWzzxrqKv1UxtRVVH8FX3qCQWUs9QuAjJpETGU', data=bytearray(b'\\x05\\x02\\x00\\x00\\x00\\x82E(\\x99\\x9e\\xb7\\xf6\\xe2\\xee-\\xd06^h\\xd7\\xfc\\x90\\xb8\\x0c\\xa5\\xfc>^n?\\x06\\x8b\\x87\\x1d\\xb4\\xda\\x82Ac\\xbc\\xc3\\xa8#>\\xb8\\x1b{\\x0b\\x1ds\\x1c\\x97b\\xd0\\xfd7\\'2T?\\x8cw\\xbf\\xb6\"\\x08q\\x12\\x08Od\\xc0g\\xce\\xee\\x13|.T\\xae\\xea\\xaa\\x87[\\x04t<*\\xd5\\x01\\xf8\\x8c\\x08\\x84;\\x9a\\xca\\x00\\x82\\xa9\\xf8\\x94\\nk\\xc2\\xaf\\xb7\\xc3\\xbd\\x9a\\xbf\\xcevO\\xf3e_{)x\\xfal\\x80\\xb8d#\\xb8r\\xdd\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00CzA\\xfb\\x95\\'fK\\x8a\\xc7(\\xb9\\x9b\\xc8H\\'\\xec\\xdc_\\xf3\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd9\\xd7x\\x859C6\\xa3a+6\\x08\\x1ej\\x0c\\xdf\\xc6v]^\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x84\\x0e\\x9a\\xc0\\xdc\\x80\\x80'))], 'signatures': [SigPubkeyPair(pubkey=EJUKLLjBMhFnkonfn7wcThnHyDewmhVmG9sEuVP9cvF8, signature=b'L\\xbc\\x12\\x94H9F\\xaf\\xf3\\xce\\x101\\xb4\\x1c-\\xa5\\x96\\x8b\\x0b80A\\xed\\x90\\xfeD\\xf0q\\x10\\xa9\\t\\'\\xcf1\\xcc\"o9E\\xc9\\xfbqcj\\xd4\\x82)R\\x9a\\xb2\\x1f)\\x06+\\xef\\x94\\xa4\\x1f\\x0e\\xba\\xba\\x7f\\xab\\x0b')], 'recent_blockhash': '9G7RsWMtk9cBjzU3N9HmhKeyHiyvui4TXYrhwHH3Ed27', 'nonce_info': None}\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:85: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4f78fa005c21f10f",
      "name" : "stdout",
      "source" : "4f78fa005c21f10f.txt",
      "type" : "text/plain",
      "size" : 311
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transferFrom"
  }, {
    "name" : "host",
    "value" : "fv-az124-903"
  }, {
    "name" : "thread",
    "value" : "3878-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transferFrom"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 8,
        "unknown" : 0,
        "total" : 9
      },
      "items" : [ {
        "uid" : "87231014cafaa5c0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/testnet/435//#testresult/87231014cafaa5c0",
        "status" : "passed",
        "time" : {
          "start" : 1641443724188,
          "stop" : 1641443739109,
          "duration" : 14921
        }
      }, {
        "uid" : "5181f73b697ae06d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/testnet/435//#testresult/5181f73b697ae06d",
        "status" : "passed",
        "time" : {
          "start" : 1641440095115,
          "stop" : 1641440107885,
          "duration" : 12770
        }
      }, {
        "uid" : "2406ced0400dd24a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/testnet/425//#testresult/2406ced0400dd24a",
        "status" : "passed",
        "time" : {
          "start" : 1641372241460,
          "stop" : 1641372255358,
          "duration" : 13898
        }
      }, {
        "uid" : "11e8bd0546268d9d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/testnet/423//#testresult/11e8bd0546268d9d",
        "status" : "passed",
        "time" : {
          "start" : 1641349060372,
          "stop" : 1641349075703,
          "duration" : 15331
        }
      }, {
        "uid" : "b36580ef080985be",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/testnet/421//#testresult/b36580ef080985be",
        "status" : "passed",
        "time" : {
          "start" : 1641342535548,
          "stop" : 1641342554610,
          "duration" : 19062
        }
      }, {
        "uid" : "8ac7929de962fee1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/testnet/269//#testresult/8ac7929de962fee1",
        "status" : "passed",
        "time" : {
          "start" : 1639951266422,
          "stop" : 1639951277576,
          "duration" : 11154
        }
      }, {
        "uid" : "25793aac1715042c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/testnet/265//#testresult/25793aac1715042c",
        "status" : "passed",
        "time" : {
          "start" : 1639910922698,
          "stop" : 1639910942099,
          "duration" : 19401
        }
      }, {
        "uid" : "c04399d2813ca03b",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/testnet/261//#testresult/c04399d2813ca03b",
        "status" : "passed",
        "time" : {
          "start" : 1639819932800,
          "stop" : 1639819947218,
          "duration" : 14418
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "e532a9ff0c3e7083.json",
  "parameterValues" : [ ]
}