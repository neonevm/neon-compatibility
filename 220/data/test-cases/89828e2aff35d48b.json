{
  "uid" : "89828e2aff35d48b",
  "name" : "test_brownie_deploy",
  "fullName" : "tests.brownie.test_brownie#test_brownie_deploy",
  "historyId" : "6e83a925951bfd8b9c39b6ea82974dc9",
  "time" : {
    "start" : 1639461400749,
    "stop" : 1639461401016,
    "duration" : 267
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f2d32e26d30>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "brownie_project = <Project 'TokenProject'>\n\n    def test_brownie_deploy(brownie_project):\n>       deployed_contract = brownie_project.Token.deploy(\n            \"Test deploy\", \"TST\", 10, 10000000, {\"from\": accounts[0]}\n        )\n\ntests/brownie/test_brownie.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retr... resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retries exceeded with url: / (Cause...me resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f2d32e26d30>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1639461379228,
      "stop" : 1639461379228,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1639461380025,
      "stop" : 1639461400748,
      "duration" : 20723
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f2d32e26d30>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
    "statusTrace" : "brownie_project = <Project 'TokenProject'>\n\n    def test_brownie_deploy(brownie_project):\n>       deployed_contract = brownie_project.Token.deploy(\n            \"Test deploy\", \"TST\", 10, 10000000, {\"from\": accounts[0]}\n        )\n\ntests/brownie/test_brownie.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retr... resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retries exceeded with url: / (Cause...me resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'HTTPConnectionPool(host='release-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f2d32e26d30>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "afedff547f135810",
      "name" : "log",
      "source" : "afedff547f135810.txt",
      "type" : "text/plain",
      "size" : 287
    }, {
      "uid" : "c0e9b5e81a7b0207",
      "name" : "stdout",
      "source" : "c0e9b5e81a7b0207.txt",
      "type" : "text/plain",
      "size" : 245
    }, {
      "uid" : "a8a817b9b715578d",
      "name" : "stderr",
      "source" : "a8a817b9b715578d.txt",
      "type" : "text/plain",
      "size" : 11611
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie"
  }, {
    "name" : "suite",
    "value" : "test_brownie"
  }, {
    "name" : "host",
    "value" : "fv-az39-626"
  }, {
    "name" : "thread",
    "value" : "4489-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.test_brownie"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 16,
        "skipped" : 0,
        "passed" : 69,
        "unknown" : 0,
        "total" : 85
      },
      "items" : [ {
        "uid" : "9d101b0ece672e78",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/219//#testresult/9d101b0ece672e78",
        "status" : "passed",
        "time" : {
          "start" : 1639451554218,
          "stop" : 1639451558201,
          "duration" : 3983
        }
      }, {
        "uid" : "ca2d50eb2f767c7d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/218//#testresult/ca2d50eb2f767c7d",
        "status" : "passed",
        "time" : {
          "start" : 1639441983521,
          "stop" : 1639441987314,
          "duration" : 3793
        }
      }, {
        "uid" : "5da7f3bd1886b88a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/217//#testresult/5da7f3bd1886b88a",
        "status" : "passed",
        "time" : {
          "start" : 1639441451735,
          "stop" : 1639441456178,
          "duration" : 4443
        }
      }, {
        "uid" : "97b7ec99799eab77",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/216//#testresult/97b7ec99799eab77",
        "status" : "passed",
        "time" : {
          "start" : 1639434192407,
          "stop" : 1639434222946,
          "duration" : 30539
        }
      }, {
        "uid" : "45a12dbd9dd0f37b",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/215//#testresult/45a12dbd9dd0f37b",
        "status" : "passed",
        "time" : {
          "start" : 1639434150667,
          "stop" : 1639434154422,
          "duration" : 3755
        }
      }, {
        "uid" : "ca25e91637e06250",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/214//#testresult/ca25e91637e06250",
        "status" : "passed",
        "time" : {
          "start" : 1639409352771,
          "stop" : 1639409384344,
          "duration" : 31573
        }
      }, {
        "uid" : "55cf912670416fa",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/213//#testresult/55cf912670416fa",
        "status" : "passed",
        "time" : {
          "start" : 1639394849797,
          "stop" : 1639394886151,
          "duration" : 36354
        }
      }, {
        "uid" : "d8d377782e585bf0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/212//#testresult/d8d377782e585bf0",
        "status" : "passed",
        "time" : {
          "start" : 1639394883383,
          "stop" : 1639394887884,
          "duration" : 4501
        }
      }, {
        "uid" : "faee8cfc88eae872",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/211//#testresult/faee8cfc88eae872",
        "status" : "passed",
        "time" : {
          "start" : 1639391215271,
          "stop" : 1639391219464,
          "duration" : 4193
        }
      }, {
        "uid" : "f2f45d6c7d3fd50e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/210//#testresult/f2f45d6c7d3fd50e",
        "status" : "passed",
        "time" : {
          "start" : 1639365185497,
          "stop" : 1639365189660,
          "duration" : 4163
        }
      }, {
        "uid" : "5d99ecd6de7e876d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/209//#testresult/5d99ecd6de7e876d",
        "status" : "passed",
        "time" : {
          "start" : 1639355546061,
          "stop" : 1639355550520,
          "duration" : 4459
        }
      }, {
        "uid" : "f19743e4ee7b4527",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/208//#testresult/f19743e4ee7b4527",
        "status" : "passed",
        "time" : {
          "start" : 1639327763539,
          "stop" : 1639327767111,
          "duration" : 3572
        }
      }, {
        "uid" : "5489fb96a6caf0d7",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/207//#testresult/5489fb96a6caf0d7",
        "status" : "passed",
        "time" : {
          "start" : 1639326292432,
          "stop" : 1639326296749,
          "duration" : 4317
        }
      }, {
        "uid" : "a2159d291b2560e1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/206//#testresult/a2159d291b2560e1",
        "status" : "passed",
        "time" : {
          "start" : 1639326218748,
          "stop" : 1639326223325,
          "duration" : 4577
        }
      }, {
        "uid" : "d8770092f9e94cd0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/205//#testresult/d8770092f9e94cd0",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://proxy.teststand2.neontest.xyz/solana",
        "time" : {
          "start" : 1639278774897,
          "stop" : 1639278807665,
          "duration" : 32768
        }
      }, {
        "uid" : "25d037ce30cb8aa7",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/204//#testresult/25d037ce30cb8aa7",
        "status" : "passed",
        "time" : {
          "start" : 1639269319364,
          "stop" : 1639269362053,
          "duration" : 42689
        }
      }, {
        "uid" : "556551fddf765a6d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/203//#testresult/556551fddf765a6d",
        "status" : "passed",
        "time" : {
          "start" : 1639254045720,
          "stop" : 1639254064517,
          "duration" : 18797
        }
      }, {
        "uid" : "71c15fcdf8f8fe09",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/202//#testresult/71c15fcdf8f8fe09",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Blockhash not found'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639232338856,
          "stop" : 1639232339247,
          "duration" : 391
        }
      }, {
        "uid" : "47612a5ba5712b60",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/201//#testresult/47612a5ba5712b60",
        "status" : "passed",
        "time" : {
          "start" : 1639230976258,
          "stop" : 1639230997439,
          "duration" : 21181
        }
      }, {
        "uid" : "b4f9d9cb7ddec41a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/199//#testresult/b4f9d9cb7ddec41a",
        "status" : "passed",
        "time" : {
          "start" : 1639223427990,
          "stop" : 1639223452740,
          "duration" : 24750
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "89828e2aff35d48b.json",
  "parameterValues" : [ ]
}