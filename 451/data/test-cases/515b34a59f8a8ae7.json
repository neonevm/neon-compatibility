{
  "uid" : "515b34a59f8a8ae7",
  "name" : "test_insufficient_balance",
  "fullName" : "tests.brownie.token.tests.test_transferFrom#test_insufficient_balance",
  "historyId" : "d39c8b74877aa97c6c5dc1418b58c7a9",
  "time" : {
    "start" : 1641861490337,
    "stop" : 1641861492821,
    "duration" : 2484
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f4e691f2a90>\ntoken = <Token Contract '0xB77a9aF21B5eb5A88590B0E5BCcA1c2877303B24'>\n\n    def test_insufficient_balance(accounts, token):\n        balance = token.balanceOf(accounts[0])\n    \n        token.approve(accounts[1], balance + 1, {'from': accounts[0]})\n        with brownie.reverts():\n>           token.transferFrom(accounts[0], accounts[2], balance + 1, {'from': accounts[1]})\n\ntests/brownie/token/tests/test_transferFrom.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/brownie/token/tests/test_transferFrom.py:111: in test_insufficient_balance\n    token.transferFrom(accounts[0], accounts[2], balance + 1, {'from': accounts[1]})\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1641861288243,
      "stop" : 1641861288243,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1641861289887,
      "stop" : 1641861306221,
      "duration" : 16334
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1641861309948,
      "stop" : 1641861309948,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1641861309948,
      "stop" : 1641861310220,
      "duration" : 272
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1641861355186,
      "stop" : 1641861357763,
      "duration" : 2577
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
    "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f4e691f2a90>\ntoken = <Token Contract '0xB77a9aF21B5eb5A88590B0E5BCcA1c2877303B24'>\n\n    def test_insufficient_balance(accounts, token):\n        balance = token.balanceOf(accounts[0])\n    \n        token.approve(accounts[1], balance + 1, {'from': accounts[0]})\n        with brownie.reverts():\n>           token.transferFrom(accounts[0], accounts[2], balance + 1, {'from': accounts[1]})\n\ntests/brownie/token/tests/test_transferFrom.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/brownie/token/tests/test_transferFrom.py:111: in test_insufficient_balance\n    token.transferFrom(accounts[0], accounts[2], balance + 1, {'from': accounts[1]})\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3c458b00a37ec14e",
      "name" : "stdout",
      "source" : "3c458b00a37ec14e.txt",
      "type" : "text/plain",
      "size" : 309
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1641861773524,
      "stop" : 1641861773525,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transferFrom"
  }, {
    "name" : "host",
    "value" : "fv-az124-903"
  }, {
    "name" : "thread",
    "value" : "3558-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transferFrom"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 67,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 67
      },
      "items" : [ {
        "uid" : "110e742afe17f461",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/450//#testresult/110e742afe17f461",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641784605124,
          "stop" : 1641784607244,
          "duration" : 2120
        }
      }, {
        "uid" : "43f4762873aa6fb5",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/449//#testresult/43f4762873aa6fb5",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641774924388,
          "stop" : 1641774926407,
          "duration" : 2019
        }
      }, {
        "uid" : "4e1e3039f2f0069c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/448//#testresult/4e1e3039f2f0069c",
        "status" : "broken",
        "statusDetails" : "ValueError: {\"err\": {\"InstructionError\": [1, \"InvalidArgument\"]}, \"fee\": 10000, \"innerInstructions\": [], \"logMessages\": [\"Program 53DfF883gyixYNXnM7s5xhdeyV8mVk9T4i2hGV9vG9io invoke [1]\", \"Program log: program/src/account_data.rs:225\", \"Program log: program/src/entrypoint.rs:1251 : Invalid Ethereum transaction nonce: acc 31, trx 30\", \"Program 53DfF883gyixYNXnM7s5xhdeyV8mVk9T4i2hGV9vG9io consumed 20569 of 500000 compute units\", \"Program 53DfF883gyixYNXnM7s5xhdeyV8mVk9T4i2hGV9vG9io failed: invalid program argument\"], \"postBalances\": [6467489532360, 381075880, 2039280, 2039280, 2672640, 31967280, 2672640, 1, 0, 1, 1141440, 1130582400], \"postTokenBalances\": [{\"accountIndex\": 2, \"mint\": \"HPsV9Deocecw3GeZv1FkAPNCBRfuVyfw9MMwjwRe1xaU\", \"uiTokenAmount\": {\"amount\": \"944112401890459360\", \"decimals\": 9, \"uiAmount\": 944112401.8904594, \"uiAmountString\": \"944112401.89045936\"}}, {\"accountIndex\": 3, \"mint\": \"HPsV9Deocecw3GeZv1FkAPNCBRfuVyfw9MMwjwRe1xaU\", \"uiTokenAmount\": {\"amount\": \"0\", \"decimals\": 9, \"uiAmount\": null, \"uiAmountString\": \"0\"}}], \"preBalances\": [6467489542360, 381075880, 2039280, 2039280, 2672640, 31967280, 2672640, 1, 0, 1, 1141440, 1130582400], \"preTokenBalances\": [{\"accountIndex\": 2, \"mint\": \"HPsV9Deocecw3GeZv1FkAPNCBRfuVyfw9MMwjwRe1xaU\", \"uiTokenAmount\": {\"amount\": \"944112401890459360\", \"decimals\": 9, \"uiAmount\": 944112401.8904594, \"uiAmountString\": \"944112401.89045936\"}}, {\"accountIndex\": 3, \"mint\": \"HPsV9Deocecw3GeZv1FkAPNCBRfuVyfw9MMwjwRe1xaU\", \"uiTokenAmount\": {\"amount\": \"0\", \"decimals\": 9, \"uiAmount\": null, \"uiAmountString\": \"0\"}}], \"rewards\": [], \"status\": {\"Err\": {\"InstructionError\": [1, \"InvalidArgument\"]}}}",
        "time" : {
          "start" : 1641698344598,
          "stop" : 1641698381188,
          "duration" : 36590
        }
      }, {
        "uid" : "14406b24ceef1496",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/447//#testresult/14406b24ceef1496",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641688889516,
          "stop" : 1641688892021,
          "duration" : 2505
        }
      }, {
        "uid" : "a7bf4baac1edb183",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/446//#testresult/a7bf4baac1edb183",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641611999268,
          "stop" : 1641612001653,
          "duration" : 2385
        }
      }, {
        "uid" : "f8fbd92d3bbeeac7",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/445//#testresult/f8fbd92d3bbeeac7",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641602281449,
          "stop" : 1641602284958,
          "duration" : 3509
        }
      }, {
        "uid" : "f953073c51722c7c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/441//#testresult/f953073c51722c7c",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641525623208,
          "stop" : 1641525625736,
          "duration" : 2528
        }
      }, {
        "uid" : "2b1c3d1b7f1604ce",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/440//#testresult/2b1c3d1b7f1604ce",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641515821253,
          "stop" : 1641515822872,
          "duration" : 1619
        }
      }, {
        "uid" : "369809c2f4bfb9ca",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/434//#testresult/369809c2f4bfb9ca",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641439118851,
          "stop" : 1641439121250,
          "duration" : 2399
        }
      }, {
        "uid" : "eb8dd27f6d517958",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/432//#testresult/eb8dd27f6d517958",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641429467136,
          "stop" : 1641429469635,
          "duration" : 2499
        }
      }, {
        "uid" : "510d79f5cf0ef0d3",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/431//#testresult/510d79f5cf0ef0d3",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641394153531,
          "stop" : 1641394156056,
          "duration" : 2525
        }
      }, {
        "uid" : "e4c8a6c7c3179f15",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/424//#testresult/e4c8a6c7c3179f15",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641369847091,
          "stop" : 1641369849548,
          "duration" : 2457
        }
      }, {
        "uid" : "e441adef3f1e8d2d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/424//#testresult/e441adef3f1e8d2d",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641352525259,
          "stop" : 1641352527722,
          "duration" : 2463
        }
      }, {
        "uid" : "5091800705c91d4",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/422//#testresult/5091800705c91d4",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641342997855,
          "stop" : 1641343000356,
          "duration" : 2501
        }
      }, {
        "uid" : "a8bbfda1cf3d7811",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/415//#testresult/a8bbfda1cf3d7811",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641266071760,
          "stop" : 1641266073754,
          "duration" : 1994
        }
      }, {
        "uid" : "1791c9dee10a0c52",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/414//#testresult/1791c9dee10a0c52",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641256562904,
          "stop" : 1641256565269,
          "duration" : 2365
        }
      }, {
        "uid" : "33084310e30829f5",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/413//#testresult/33084310e30829f5",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641247470231,
          "stop" : 1641247472712,
          "duration" : 2481
        }
      }, {
        "uid" : "1677ddc53ebef230",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/412//#testresult/1677ddc53ebef230",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641243322583,
          "stop" : 1641243325018,
          "duration" : 2435
        }
      }, {
        "uid" : "c2202ec9ab040854",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/411//#testresult/c2202ec9ab040854",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641240382832,
          "stop" : 1641240385725,
          "duration" : 2893
        }
      }, {
        "uid" : "fbe004e7c311ea2f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/410//#testresult/fbe004e7c311ea2f",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641234896795,
          "stop" : 1641234899086,
          "duration" : 2291
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "515b34a59f8a8ae7.json",
  "parameterValues" : [ ]
}