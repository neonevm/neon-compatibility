{
  "uid" : "f1e4952b999546aa",
  "name" : "test_initial_approval_is_zero[4]",
  "fullName" : "tests.brownie.token.tests.test_approve#test_initial_approval_is_zero",
  "historyId" : "037b77ef7fa0bf3ae54efe64c16442a6",
  "time" : {
    "start" : 1641974825620,
    "stop" : 1641974825620,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f189611b8e0>: Failed to establish a new connection: [Errno 111] Connection refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "brownie_project = <Project 'TokenProject'>\naccounts = <brownie.network.account.Accounts object at 0x7f1c794138b0>\n\n    @pytest.fixture(scope=\"module\")\n    def token(brownie_project, accounts):\n>       return brownie_project.Token.deploy(\"Test Token\", \"TST\", 18, 1e21, {'from': accounts[0]})\n\ntests/brownie/token/tests/conftest.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries ex...ion refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by N...ction refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f189611b8e0>: Failed to establish a new connection: [Errno 111] Connection refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1641974809207,
      "stop" : 1641974809207,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1641974810468,
      "stop" : 1641974824124,
      "duration" : 13656
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1641974824648,
      "stop" : 1641974824648,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1641974824648,
      "stop" : 1641974824919,
      "duration" : 271
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1641974824920,
      "stop" : 1641974825251,
      "duration" : 331
    },
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f189611b8e0>: Failed to establish a new connection: [Errno 111] Connection refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n",
    "statusTrace" : "  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/_pytest/fixtures.py\", line 932, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/neon-compatibility/neon-compatibility/tests/brownie/token/tests/conftest.py\", line 49, in token\n    return brownie_project.Token.deploy(\"Test Token\", \"TST\", 18, 1e21, {'from': accounts[0]})\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py\", line 600, in __call__\n    return tx[\"from\"].deploy(\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py\", line 508, in deploy\n    receipt, exc = self._make_transaction(\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py\", line 725, in _make_transaction\n    raise VirtualMachineError(e) from None\n  File \"/home/runner/.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py\", line 121, in __init__\n    raise ValueError(str(exc)) from None\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1641974886821,
      "stop" : 1641974886821,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_approve"
  }, {
    "name" : "host",
    "value" : "fv-az74-735"
  }, {
    "name" : "thread",
    "value" : "3604-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_approve"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "idx",
    "value" : "4"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 11,
        "skipped" : 0,
        "passed" : 63,
        "unknown" : 0,
        "total" : 74
      },
      "items" : [ {
        "uid" : "98915be22dc39861",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/457//#testresult/98915be22dc39861",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f1895fcda90>: Failed to establish a new connection: [Errno 111] Connection refused'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1641974204112,
          "stop" : 1641974204112,
          "duration" : 0
        }
      }, {
        "uid" : "e3751f3a1520931e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/456//#testresult/e3751f3a1520931e",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ReadTimeout: HTTPConnectionPool(host='proxy.night.stand.neontest.xyz', port=80): Read timed out. (read timeout=30)",
        "time" : {
          "start" : 1641957701861,
          "stop" : 1641957701861,
          "duration" : 0
        }
      }, {
        "uid" : "c3571f391a768296",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/455//#testresult/c3571f391a768296",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ReadTimeout: HTTPConnectionPool(host='proxy.night.stand.neontest.xyz', port=80): Read timed out. (read timeout=30)",
        "time" : {
          "start" : 1641951898377,
          "stop" : 1641951898377,
          "duration" : 0
        }
      }, {
        "uid" : "c83bc1792ab37742",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/454//#testresult/c83bc1792ab37742",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ReadTimeout: HTTPConnectionPool(host='proxy.night.stand.neontest.xyz', port=80): Read timed out. (read timeout=30)",
        "time" : {
          "start" : 1641950376855,
          "stop" : 1641950376855,
          "duration" : 0
        }
      }, {
        "uid" : "bd08430814503c57",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/453//#testresult/bd08430814503c57",
        "status" : "passed",
        "time" : {
          "start" : 1641947683342,
          "stop" : 1641947683498,
          "duration" : 156
        }
      }, {
        "uid" : "ab17dae5f6d36f60",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/452//#testresult/ab17dae5f6d36f60",
        "status" : "passed",
        "time" : {
          "start" : 1641870926826,
          "stop" : 1641870926994,
          "duration" : 168
        }
      }, {
        "uid" : "e61ff922c874f274",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/451//#testresult/e61ff922c874f274",
        "status" : "passed",
        "time" : {
          "start" : 1641861314054,
          "stop" : 1641861314254,
          "duration" : 200
        }
      }, {
        "uid" : "664acbfa2eef185e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/450//#testresult/664acbfa2eef185e",
        "status" : "passed",
        "time" : {
          "start" : 1641784479713,
          "stop" : 1641784479928,
          "duration" : 215
        }
      }, {
        "uid" : "f2596714a1816a73",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/449//#testresult/f2596714a1816a73",
        "status" : "passed",
        "time" : {
          "start" : 1641774820317,
          "stop" : 1641774820466,
          "duration" : 149
        }
      }, {
        "uid" : "d8be91c01c68e566",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/448//#testresult/d8be91c01c68e566",
        "status" : "passed",
        "time" : {
          "start" : 1641698101427,
          "stop" : 1641698101602,
          "duration" : 175
        }
      }, {
        "uid" : "4e0dca3bee4d95ac",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/447//#testresult/4e0dca3bee4d95ac",
        "status" : "passed",
        "time" : {
          "start" : 1641688592732,
          "stop" : 1641688592959,
          "duration" : 227
        }
      }, {
        "uid" : "7a1cd5dd95746869",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/446//#testresult/7a1cd5dd95746869",
        "status" : "passed",
        "time" : {
          "start" : 1641611736951,
          "stop" : 1641611737152,
          "duration" : 201
        }
      }, {
        "uid" : "464dac11330521c3",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/445//#testresult/464dac11330521c3",
        "status" : "passed",
        "time" : {
          "start" : 1641602009539,
          "stop" : 1641602009739,
          "duration" : 200
        }
      }, {
        "uid" : "4f7230dc38d7fcd",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/441//#testresult/4f7230dc38d7fcd",
        "status" : "passed",
        "time" : {
          "start" : 1641525428573,
          "stop" : 1641525428799,
          "duration" : 226
        }
      }, {
        "uid" : "aab7fa703ff7c879",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/440//#testresult/aab7fa703ff7c879",
        "status" : "passed",
        "time" : {
          "start" : 1641515692878,
          "stop" : 1641515693041,
          "duration" : 163
        }
      }, {
        "uid" : "d4bd31d187defd19",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/434//#testresult/d4bd31d187defd19",
        "status" : "passed",
        "time" : {
          "start" : 1641439017485,
          "stop" : 1641439017694,
          "duration" : 209
        }
      }, {
        "uid" : "7e3c531a5657de7",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/432//#testresult/7e3c531a5657de7",
        "status" : "passed",
        "time" : {
          "start" : 1641429361623,
          "stop" : 1641429361824,
          "duration" : 201
        }
      }, {
        "uid" : "5742bfa5343bc820",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/431//#testresult/5742bfa5343bc820",
        "status" : "passed",
        "time" : {
          "start" : 1641394058038,
          "stop" : 1641394058265,
          "duration" : 227
        }
      }, {
        "uid" : "def89ca5e60ae7fd",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/424//#testresult/def89ca5e60ae7fd",
        "status" : "passed",
        "time" : {
          "start" : 1641369752820,
          "stop" : 1641369753030,
          "duration" : 210
        }
      }, {
        "uid" : "7995ce8a2b1b6a73",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/424//#testresult/7995ce8a2b1b6a73",
        "status" : "passed",
        "time" : {
          "start" : 1641352442083,
          "stop" : 1641352442279,
          "duration" : 196
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "f1e4952b999546aa.json",
  "parameterValues" : [ "4" ]
}