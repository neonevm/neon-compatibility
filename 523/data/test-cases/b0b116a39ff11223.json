{
  "uid" : "b0b116a39ff11223",
  "name" : "test_insufficient_balance",
  "fullName" : "tests.brownie.token.tests.test_transferFrom#test_insufficient_balance",
  "historyId" : "d39c8b74877aa97c6c5dc1418b58c7a9",
  "time" : {
    "start" : 1642639033442,
    "stop" : 1642639035429,
    "duration" : 1987
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f247e901f40>\ntoken = <Token Contract '0x0C637Da85E26a087851a52711c4246BA1B725e16'>\n\n    def test_insufficient_balance(accounts, token):\n        balance = token.balanceOf(accounts[0])\n    \n        token.approve(accounts[1], balance + 1, {'from': accounts[0]})\n        with brownie.reverts():\n>           token.transferFrom(accounts[0], accounts[2], balance + 1, {'from': accounts[1]})\n\ntests/brownie/token/tests/test_transferFrom.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/brownie/token/tests/test_transferFrom.py:111: in test_insufficient_balance\n    token.transferFrom(accounts[0], accounts[2], balance + 1, {'from': accounts[1]})\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1642638934780,
      "stop" : 1642638934780,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1642638936173,
      "stop" : 1642638948660,
      "duration" : 12487
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1642638951930,
      "stop" : 1642638951931,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1642638951931,
      "stop" : 1642638952198,
      "duration" : 267
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1642638992675,
      "stop" : 1642638995157,
      "duration" : 2482
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
    "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f247e901f40>\ntoken = <Token Contract '0x0C637Da85E26a087851a52711c4246BA1B725e16'>\n\n    def test_insufficient_balance(accounts, token):\n        balance = token.balanceOf(accounts[0])\n    \n        token.approve(accounts[1], balance + 1, {'from': accounts[0]})\n        with brownie.reverts():\n>           token.transferFrom(accounts[0], accounts[2], balance + 1, {'from': accounts[1]})\n\ntests/brownie/token/tests/test_transferFrom.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/brownie/token/tests/test_transferFrom.py:111: in test_insufficient_balance\n    token.transferFrom(accounts[0], accounts[2], balance + 1, {'from': accounts[1]})\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f6d2a885b8210ed4",
      "name" : "stdout",
      "source" : "f6d2a885b8210ed4.txt",
      "type" : "text/plain",
      "size" : 308
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1642639200275,
      "stop" : 1642639200275,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transferFrom"
  }, {
    "name" : "host",
    "value" : "fv-az124-340"
  }, {
    "name" : "thread",
    "value" : "3575-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transferFrom"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 116,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 116
      },
      "items" : [ {
        "uid" : "245cf560833f77fb",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/522//#testresult/245cf560833f77fb",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642562025104,
          "stop" : 1642562027189,
          "duration" : 2085
        }
      }, {
        "uid" : "8b70ef78729f08c2",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/521//#testresult/8b70ef78729f08c2",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642552299772,
          "stop" : 1642552302245,
          "duration" : 2473
        }
      }, {
        "uid" : "ab186721680166f4",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/520//#testresult/ab186721680166f4",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642511221996,
          "stop" : 1642511223643,
          "duration" : 1647
        }
      }, {
        "uid" : "a993843f1ee1bb31",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/514//#testresult/a993843f1ee1bb31",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ReadTimeout: HTTPConnectionPool(host='proxy.night.stand.neontest.xyz', port=80): Read timed out. (read timeout=30)",
        "time" : {
          "start" : 1642496745889,
          "stop" : 1642496745889,
          "duration" : 0
        }
      }, {
        "uid" : "627f824fd3ba464",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/513//#testresult/627f824fd3ba464",
        "status" : "broken",
        "statusDetails" : "ValueError: there is no unique or exclusion constraint matching the ON CONFLICT specification",
        "time" : {
          "start" : 1642475725626,
          "stop" : 1642475725626,
          "duration" : 0
        }
      }, {
        "uid" : "f7b79f55824efd32",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/512//#testresult/f7b79f55824efd32",
        "status" : "broken",
        "statusDetails" : "ValueError: there is no unique or exclusion constraint matching the ON CONFLICT specification",
        "time" : {
          "start" : 1642466079341,
          "stop" : 1642466079341,
          "duration" : 0
        }
      }, {
        "uid" : "7ddb0f1abdaa009e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/511//#testresult/7ddb0f1abdaa009e",
        "status" : "broken",
        "statusDetails" : "web3.exceptions.BlockNotFound: Block with id: 'latest' not found.",
        "time" : {
          "start" : 1642389396386,
          "stop" : 1642389396386,
          "duration" : 0
        }
      }, {
        "uid" : "4116b89ba6d997d9",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/510//#testresult/4116b89ba6d997d9",
        "status" : "broken",
        "statusDetails" : "web3.exceptions.BlockNotFound: Block with id: 'latest' not found.",
        "time" : {
          "start" : 1642379647467,
          "stop" : 1642379647467,
          "duration" : 0
        }
      }, {
        "uid" : "ca3d613d97ed9071",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/509//#testresult/ca3d613d97ed9071",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642303026804,
          "stop" : 1642303028790,
          "duration" : 1986
        }
      }, {
        "uid" : "fb7ec041d03703a8",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/508//#testresult/fb7ec041d03703a8",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642293388448,
          "stop" : 1642293390484,
          "duration" : 2036
        }
      }, {
        "uid" : "7711cab48e66f8a5",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/506//#testresult/7711cab48e66f8a5",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642216591739,
          "stop" : 1642216593844,
          "duration" : 2105
        }
      }, {
        "uid" : "e8cf6e0f3bbf0549",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/505//#testresult/e8cf6e0f3bbf0549",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642206859150,
          "stop" : 1642206861273,
          "duration" : 2123
        }
      }, {
        "uid" : "fe4cf8b8a8964453",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/494//#testresult/fe4cf8b8a8964453",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642169319268,
          "stop" : 1642169321787,
          "duration" : 2519
        }
      }, {
        "uid" : "82795d1357f1dcc7",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/494//#testresult/82795d1357f1dcc7",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642158841923,
          "stop" : 1642158844333,
          "duration" : 2410
        }
      }, {
        "uid" : "ebd712dac94416ca",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/493//#testresult/ebd712dac94416ca",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642130193597,
          "stop" : 1642130195724,
          "duration" : 2127
        }
      }, {
        "uid" : "827986e598e33fe",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/492//#testresult/827986e598e33fe",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642120628550,
          "stop" : 1642120631140,
          "duration" : 2590
        }
      }, {
        "uid" : "a3be15555eb3e4d2",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/490//#testresult/a3be15555eb3e4d2",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642099355873,
          "stop" : 1642099357913,
          "duration" : 2040
        }
      }, {
        "uid" : "5e45c58ccd0ad7f2",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/488//#testresult/5e45c58ccd0ad7f2",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642088387388,
          "stop" : 1642088389958,
          "duration" : 2570
        }
      }, {
        "uid" : "be41748838929cfe",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/487//#testresult/be41748838929cfe",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642083139956,
          "stop" : 1642083141596,
          "duration" : 1640
        }
      }, {
        "uid" : "d1a186a23dc2876f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/485//#testresult/d1a186a23dc2876f",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'execution reverted: Insufficient balance'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1642075679921,
          "stop" : 1642075682249,
          "duration" : 2328
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "b0b116a39ff11223.json",
  "parameterValues" : [ ]
}