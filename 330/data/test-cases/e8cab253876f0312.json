{
  "uid" : "e8cab253876f0312",
  "name" : "test_receiver_approval_not_affected",
  "fullName" : "tests.brownie.token.tests.test_transferFrom#test_receiver_approval_not_affected",
  "historyId" : "79c73758ef15eaf808082a9dbc5dbfa0",
  "time" : {
    "start" : 1640315633153,
    "stop" : 1640315637841,
    "duration" : 4688
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7eff948df730>: Failed to establish a new connection: [Errno 99] Cannot assign requested address'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f1826cc2070>\ntoken = <Token Contract '0xa552a26c4272c0ec552feAC21007Df354dd9F714'>\n\n    def test_receiver_approval_not_affected(accounts, token):\n        approval_amount = token.balanceOf(accounts[0])\n        transfer_amount = approval_amount // 4\n    \n        token.approve(accounts[1], approval_amount, {'from': accounts[0]})\n        token.approve(accounts[2], approval_amount, {'from': accounts[0]})\n>       token.transferFrom(accounts[0], accounts[2], transfer_amount, {'from': accounts[1]})\n\ntests/brownie/token/tests/test_transferFrom.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries ex...ted address'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by N...ested address'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7eff948df730>: Failed to establish a new connection: [Errno 99] Cannot assign requested address'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1640315547308,
      "stop" : 1640315547308,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1640315548612,
      "stop" : 1640315565247,
      "duration" : 16635
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1640315568720,
      "stop" : 1640315568720,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1640315568720,
      "stop" : 1640315568990,
      "duration" : 270
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1640315611770,
      "stop" : 1640315616164,
      "duration" : 4394
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7eff948df730>: Failed to establish a new connection: [Errno 99] Cannot assign requested address'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
    "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f1826cc2070>\ntoken = <Token Contract '0xa552a26c4272c0ec552feAC21007Df354dd9F714'>\n\n    def test_receiver_approval_not_affected(accounts, token):\n        approval_amount = token.balanceOf(accounts[0])\n        transfer_amount = approval_amount // 4\n    \n        token.approve(accounts[1], approval_amount, {'from': accounts[0]})\n        token.approve(accounts[2], approval_amount, {'from': accounts[0]})\n>       token.transferFrom(accounts[0], accounts[2], transfer_amount, {'from': accounts[1]})\n\ntests/brownie/token/tests/test_transferFrom.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries ex...ted address'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by N...ested address'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7eff948df730>: Failed to establish a new connection: [Errno 99] Cannot assign requested address'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ec27a59416e4ab59",
      "name" : "stdout",
      "source" : "ec27a59416e4ab59.txt",
      "type" : "text/plain",
      "size" : 618
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1640315832550,
      "stop" : 1640315832550,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transferFrom"
  }, {
    "name" : "host",
    "value" : "fv-az39-764"
  }, {
    "name" : "thread",
    "value" : "3800-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transferFrom"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 33,
        "skipped" : 0,
        "passed" : 96,
        "unknown" : 0,
        "total" : 129
      },
      "items" : [ {
        "uid" : "4c0ff05e4c496cac",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/328//#testresult/4c0ff05e4c496cac",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://proxy.teststand2.neontest.xyz/solana",
        "time" : {
          "start" : 1640306384730,
          "stop" : 1640306385530,
          "duration" : 800
        }
      }, {
        "uid" : "d9c0a4b90afaedd4",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/325//#testresult/d9c0a4b90afaedd4",
        "status" : "passed",
        "time" : {
          "start" : 1640285254971,
          "stop" : 1640285260720,
          "duration" : 5749
        }
      }, {
        "uid" : "1ff008286a3c01ca",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/323//#testresult/1ff008286a3c01ca",
        "status" : "broken",
        "statusDetails" : "ValueError: HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f17afd9cb80>: Failed to establish a new connection: [Errno 99] Cannot assign requested address'))",
        "time" : {
          "start" : 1640281194833,
          "stop" : 1640281194833,
          "duration" : 0
        }
      }, {
        "uid" : "42f5fa5f20e24b56",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/301//#testresult/42f5fa5f20e24b56",
        "status" : "passed",
        "time" : {
          "start" : 1640229261871,
          "stop" : 1640229268905,
          "duration" : 7034
        }
      }, {
        "uid" : "44b84ad2b4fb0082",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/300//#testresult/44b84ad2b4fb0082",
        "status" : "passed",
        "time" : {
          "start" : 1640219638204,
          "stop" : 1640219644882,
          "duration" : 6678
        }
      }, {
        "uid" : "82656e3bf57c044f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/285//#testresult/82656e3bf57c044f",
        "status" : "passed",
        "time" : {
          "start" : 1640153734363,
          "stop" : 1640153742722,
          "duration" : 8359
        }
      }, {
        "uid" : "9b43cc47d4dd953e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/284//#testresult/9b43cc47d4dd953e",
        "status" : "passed",
        "time" : {
          "start" : 1640142896548,
          "stop" : 1640142904115,
          "duration" : 7567
        }
      }, {
        "uid" : "f227eccb59cdfdb8",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/283//#testresult/f227eccb59cdfdb8",
        "status" : "passed",
        "time" : {
          "start" : 1640133343213,
          "stop" : 1640133351175,
          "duration" : 7962
        }
      }, {
        "uid" : "775ff0afdb911d4d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/279//#testresult/775ff0afdb911d4d",
        "status" : "passed",
        "time" : {
          "start" : 1640056506015,
          "stop" : 1640056513583,
          "duration" : 7568
        }
      }, {
        "uid" : "512a0735a23328c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/278//#testresult/512a0735a23328c",
        "status" : "passed",
        "time" : {
          "start" : 1640046967076,
          "stop" : 1640046976241,
          "duration" : 9165
        }
      }, {
        "uid" : "a1bd1e9b9127515d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/272//#testresult/a1bd1e9b9127515d",
        "status" : "passed",
        "time" : {
          "start" : 1639988695583,
          "stop" : 1639988709174,
          "duration" : 13591
        }
      }, {
        "uid" : "7ea07b29041586f1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/271//#testresult/7ea07b29041586f1",
        "status" : "passed",
        "time" : {
          "start" : 1639970075124,
          "stop" : 1639970081003,
          "duration" : 5879
        }
      }, {
        "uid" : "f6baed68f357457e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/270//#testresult/f6baed68f357457e",
        "status" : "passed",
        "time" : {
          "start" : 1639960470230,
          "stop" : 1639960474832,
          "duration" : 4602
        }
      }, {
        "uid" : "86bc2f4ce7058765",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/267//#testresult/86bc2f4ce7058765",
        "status" : "passed",
        "time" : {
          "start" : 1639910723617,
          "stop" : 1639910731174,
          "duration" : 7557
        }
      }, {
        "uid" : "ba51c7cad8ee426f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/263//#testresult/ba51c7cad8ee426f",
        "status" : "passed",
        "time" : {
          "start" : 1639883688550,
          "stop" : 1639883698119,
          "duration" : 9569
        }
      }, {
        "uid" : "6589add338bb0ede",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/262//#testresult/6589add338bb0ede",
        "status" : "passed",
        "time" : {
          "start" : 1639874161559,
          "stop" : 1639874171933,
          "duration" : 10374
        }
      }, {
        "uid" : "2184ec96cb7bab42",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/259//#testresult/2184ec96cb7bab42",
        "status" : "passed",
        "time" : {
          "start" : 1639797337115,
          "stop" : 1639797344715,
          "duration" : 7600
        }
      }, {
        "uid" : "4d96869b697541ee",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/258//#testresult/4d96869b697541ee",
        "status" : "passed",
        "time" : {
          "start" : 1639787700811,
          "stop" : 1639787710030,
          "duration" : 9219
        }
      }, {
        "uid" : "1380f1ea24ce7e55",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/255//#testresult/1380f1ea24ce7e55",
        "status" : "broken",
        "statusDetails" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x5f46c4fa11ecedca02b21b2038498637dd410b06fb359a81b89deefafb95cee4",
        "time" : {
          "start" : 1639739199402,
          "stop" : 1639739212490,
          "duration" : 13088
        }
      }, {
        "uid" : "becf370cb661bafd",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/253//#testresult/becf370cb661bafd",
        "status" : "broken",
        "statusDetails" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xbe88df5a1c9961aeeeb7e242fa0229e7df7d6a03cdc7b57c3f46d01185f3323e",
        "time" : {
          "start" : 1639724822431,
          "stop" : 1639724822431,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "e8cab253876f0312.json",
  "parameterValues" : [ ]
}