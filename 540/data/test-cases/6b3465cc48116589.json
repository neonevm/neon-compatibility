{
  "uid" : "6b3465cc48116589",
  "name" : "test_modify_approve",
  "fullName" : "tests.brownie.token.tests.test_approve#test_modify_approve",
  "historyId" : "955e3f6226713de80a392f10c503148c",
  "time" : {
    "start" : 1643167204720,
    "stop" : 1643167264620,
    "duration" : 59900
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Verifying nonce before send transaction: Error processing Instruction 1: invalid program argument",
  "statusTrace" : "token = <Token Contract '0x90e797814A8f3C9Cc94376B54A95295b47C9a58B'>\naccounts = <brownie.network.account.Accounts object at 0x7fcdf85cb0d0>\n\n    def test_modify_approve(token, accounts):\n        token.approve(accounts[1], 10**19, {'from': accounts[0]})\n>       token.approve(accounts[1], 12345678, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_approve.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:743: in _make_transaction\n    exc = VirtualMachineError(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError({'code': -32002, 'message': 'Verifying nonce before send transaction: Error processing ...invalid program argument', 'data': {'logs': ['/src/entrypoint.rs Invalid Ethereum transaction nonce: acc 5, trx 4']}}))\nexc = {'code': -32002, 'data': {'logs': ['/src/entrypoint.rs Invalid Ethereum transaction nonce: acc 5, trx 4']}, 'message': 'Verifying nonce before send transaction: Error processing Instruction 1: invalid program argument'}\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n>               raise ValueError(exc[\"message\"]) from None\nE               ValueError: Verifying nonce before send transaction: Error processing Instruction 1: invalid program argument\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:104: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "token",
    "time" : {
      "start" : 1643166841995,
      "stop" : 1643167163642,
      "duration" : 321647
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: Verifying nonce before send transaction: Error processing Instruction 1: invalid program argument",
    "statusTrace" : "token = <Token Contract '0x90e797814A8f3C9Cc94376B54A95295b47C9a58B'>\naccounts = <brownie.network.account.Accounts object at 0x7fcdf85cb0d0>\n\n    def test_modify_approve(token, accounts):\n        token.approve(accounts[1], 10**19, {'from': accounts[0]})\n>       token.approve(accounts[1], 12345678, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_approve.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:743: in _make_transaction\n    exc = VirtualMachineError(e)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError({'code': -32002, 'message': 'Verifying nonce before send transaction: Error processing ...invalid program argument', 'data': {'logs': ['/src/entrypoint.rs Invalid Ethereum transaction nonce: acc 5, trx 4']}}))\nexc = {'code': -32002, 'data': {'logs': ['/src/entrypoint.rs Invalid Ethereum transaction nonce: acc 5, trx 4']}, 'message': 'Verifying nonce before send transaction: Error processing Instruction 1: invalid program argument'}\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n>               raise ValueError(exc[\"message\"]) from None\nE               ValueError: Verifying nonce before send transaction: Error processing Instruction 1: invalid program argument\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:104: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "27040b89fe438748",
      "name" : "stdout",
      "source" : "27040b89fe438748.txt",
      "type" : "text/plain",
      "size" : 308
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_approve"
  }, {
    "name" : "host",
    "value" : "fv-az138-478"
  }, {
    "name" : "thread",
    "value" : "7797-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_approve"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 31,
        "skipped" : 0,
        "passed" : 93,
        "unknown" : 0,
        "total" : 124
      },
      "items" : [ {
        "uid" : "7803946901171a34",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/539//#testresult/7803946901171a34",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ReadTimeout: HTTPConnectionPool(host='proxy.night.stand.neontest.xyz', port=80): Read timed out. (read timeout=30)",
        "time" : {
          "start" : 1643157456472,
          "stop" : 1643157670665,
          "duration" : 214193
        }
      }, {
        "uid" : "bd6580988ba8b510",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/530//#testresult/bd6580988ba8b510",
        "status" : "passed",
        "time" : {
          "start" : 1642776644493,
          "stop" : 1642776653430,
          "duration" : 8937
        }
      }, {
        "uid" : "c39a564198432838",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/529//#testresult/c39a564198432838",
        "status" : "passed",
        "time" : {
          "start" : 1642772099091,
          "stop" : 1642772104177,
          "duration" : 5086
        }
      }, {
        "uid" : "ef9716598d66870d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/528//#testresult/ef9716598d66870d",
        "status" : "passed",
        "time" : {
          "start" : 1642758149280,
          "stop" : 1642758153630,
          "duration" : 4350
        }
      }, {
        "uid" : "1245d5341d2adf17",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/526//#testresult/1245d5341d2adf17",
        "status" : "passed",
        "time" : {
          "start" : 1642725070186,
          "stop" : 1642725073653,
          "duration" : 3467
        }
      }, {
        "uid" : "88a54f89b2f65013",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/524//#testresult/88a54f89b2f65013",
        "status" : "passed",
        "time" : {
          "start" : 1642648297094,
          "stop" : 1642648300326,
          "duration" : 3232
        }
      }, {
        "uid" : "aa8c8efa1413c10d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/523//#testresult/aa8c8efa1413c10d",
        "status" : "passed",
        "time" : {
          "start" : 1642638957460,
          "stop" : 1642638960678,
          "duration" : 3218
        }
      }, {
        "uid" : "82b683ca4303de04",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/522//#testresult/82b683ca4303de04",
        "status" : "passed",
        "time" : {
          "start" : 1642561947135,
          "stop" : 1642561950793,
          "duration" : 3658
        }
      }, {
        "uid" : "451ed180df43cce0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/521//#testresult/451ed180df43cce0",
        "status" : "passed",
        "time" : {
          "start" : 1642552223007,
          "stop" : 1642552226651,
          "duration" : 3644
        }
      }, {
        "uid" : "de9c6fcac60dcf2",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/520//#testresult/de9c6fcac60dcf2",
        "status" : "passed",
        "time" : {
          "start" : 1642511165353,
          "stop" : 1642511167931,
          "duration" : 2578
        }
      }, {
        "uid" : "50650508e8c515d7",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/514//#testresult/50650508e8c515d7",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ReadTimeout: HTTPConnectionPool(host='proxy.night.stand.neontest.xyz', port=80): Read timed out. (read timeout=30)",
        "time" : {
          "start" : 1642496435979,
          "stop" : 1642496435979,
          "duration" : 0
        }
      }, {
        "uid" : "a66bd68f87d058ac",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/513//#testresult/a66bd68f87d058ac",
        "status" : "broken",
        "statusDetails" : "ValueError: there is no unique or exclusion constraint matching the ON CONFLICT specification",
        "time" : {
          "start" : 1642475722769,
          "stop" : 1642475722769,
          "duration" : 0
        }
      }, {
        "uid" : "fa93c1546731776a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/512//#testresult/fa93c1546731776a",
        "status" : "broken",
        "statusDetails" : "ValueError: there is no unique or exclusion constraint matching the ON CONFLICT specification",
        "time" : {
          "start" : 1642466076571,
          "stop" : 1642466076571,
          "duration" : 0
        }
      }, {
        "uid" : "9419aba615517e7d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/511//#testresult/9419aba615517e7d",
        "status" : "broken",
        "statusDetails" : "web3.exceptions.BlockNotFound: Block with id: 'latest' not found.",
        "time" : {
          "start" : 1642389391701,
          "stop" : 1642389391701,
          "duration" : 0
        }
      }, {
        "uid" : "2139e8893ba7fbf8",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/510//#testresult/2139e8893ba7fbf8",
        "status" : "broken",
        "statusDetails" : "web3.exceptions.BlockNotFound: Block with id: 'latest' not found.",
        "time" : {
          "start" : 1642379642965,
          "stop" : 1642379642965,
          "duration" : 0
        }
      }, {
        "uid" : "7a3020423af34b58",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/509//#testresult/7a3020423af34b58",
        "status" : "passed",
        "time" : {
          "start" : 1642302949388,
          "stop" : 1642302952762,
          "duration" : 3374
        }
      }, {
        "uid" : "661e112f6a428ef7",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/508//#testresult/661e112f6a428ef7",
        "status" : "passed",
        "time" : {
          "start" : 1642293308879,
          "stop" : 1642293312705,
          "duration" : 3826
        }
      }, {
        "uid" : "d09589c684e91bdc",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/506//#testresult/d09589c684e91bdc",
        "status" : "passed",
        "time" : {
          "start" : 1642216513166,
          "stop" : 1642216517045,
          "duration" : 3879
        }
      }, {
        "uid" : "b88d8137e8590306",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/505//#testresult/b88d8137e8590306",
        "status" : "passed",
        "time" : {
          "start" : 1642206781060,
          "stop" : 1642206785143,
          "duration" : 4083
        }
      }, {
        "uid" : "37ccc89cfdfdfd79",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/494//#testresult/37ccc89cfdfdfd79",
        "status" : "passed",
        "time" : {
          "start" : 1642169240753,
          "stop" : 1642169244024,
          "duration" : 3271
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "6b3465cc48116589.json",
  "parameterValues" : [ ]
}