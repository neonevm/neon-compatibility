{
  "uid" : "8376a8d35e09eac8",
  "name" : "test_sender_balance_decreases",
  "fullName" : "tests.brownie.token.tests.test_transferFrom#test_sender_balance_decreases",
  "historyId" : "cdd38f2d3ff74f7c9e250618c4f315b0",
  "time" : {
    "start" : 1639739182177,
    "stop" : 1639739184782,
    "duration" : 2605
  },
  "status" : "broken",
  "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xd8aa8a40e75aee85bb69f9cfdc639e3f6820f367f2685440453ab820e4c4185e",
  "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f9c2ec0c700>\ntoken = <Token Contract '0xc06275FAcB5A82124D961b0573188A522b4a4b5E'>\n\n    def test_sender_balance_decreases(accounts, token):\n        sender_balance = token.balanceOf(accounts[0])\n        amount = sender_balance // 4\n    \n>       token.approve(accounts[1], amount, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_transferFrom.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0x35D0b67BeB0e9a8147ACbA5883685d3cD601D682'>\nreceipt = <Transaction '\u001B[0;2;37m0xd8aa8a40e75aee85bb69f9cfdc639e3f6820f367f2685440453ab820e4c4185e\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xd8aa8a40e75aee85bb69f9cfdc639e3f6820f367f2685440453ab820e4c4185e\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1639739103162,
      "stop" : 1639739103162,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1639739104611,
      "stop" : 1639739124950,
      "duration" : 20339
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1639739130260,
      "stop" : 1639739130260,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1639739130261,
      "stop" : 1639739130579,
      "duration" : 318
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1639739173185,
      "stop" : 1639739182176,
      "duration" : 8991
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xd8aa8a40e75aee85bb69f9cfdc639e3f6820f367f2685440453ab820e4c4185e",
    "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f9c2ec0c700>\ntoken = <Token Contract '0xc06275FAcB5A82124D961b0573188A522b4a4b5E'>\n\n    def test_sender_balance_decreases(accounts, token):\n        sender_balance = token.balanceOf(accounts[0])\n        amount = sender_balance // 4\n    \n>       token.approve(accounts[1], amount, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_transferFrom.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0x35D0b67BeB0e9a8147ACbA5883685d3cD601D682'>\nreceipt = <Transaction '\u001B[0;2;37m0xd8aa8a40e75aee85bb69f9cfdc639e3f6820f367f2685440453ab820e4c4185e\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xd8aa8a40e75aee85bb69f9cfdc639e3f6820f367f2685440453ab820e4c4185e\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "7c4b52e145bb9623",
      "name" : "stdout",
      "source" : "7c4b52e145bb9623.txt",
      "type" : "text/plain",
      "size" : 803
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1639739564866,
      "stop" : 1639739564867,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transferFrom"
  }, {
    "name" : "host",
    "value" : "fv-az39-454"
  }, {
    "name" : "thread",
    "value" : "4483-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transferFrom"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 27,
        "skipped" : 0,
        "passed" : 83,
        "unknown" : 0,
        "total" : 110
      },
      "items" : [ {
        "uid" : "7d9f6fd533447094",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/253//#testresult/7d9f6fd533447094",
        "status" : "broken",
        "statusDetails" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xbe88df5a1c9961aeeeb7e242fa0229e7df7d6a03cdc7b57c3f46d01185f3323e",
        "time" : {
          "start" : 1639724819133,
          "stop" : 1639724819133,
          "duration" : 0
        }
      }, {
        "uid" : "a272d096ea1464b6",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/251//#testresult/a272d096ea1464b6",
        "status" : "passed",
        "time" : {
          "start" : 1639710850099,
          "stop" : 1639710857383,
          "duration" : 7284
        }
      }, {
        "uid" : "a36affe9bb0b5366",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/250//#testresult/a36affe9bb0b5366",
        "status" : "passed",
        "time" : {
          "start" : 1639701370156,
          "stop" : 1639701376699,
          "duration" : 6543
        }
      }, {
        "uid" : "5156e18f5fb8cdc0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/249//#testresult/5156e18f5fb8cdc0",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ChunkedEncodingError: (\"Connection broken: ConnectionResetError(104, 'Connection reset by peer')\", ConnectionResetError(104, 'Connection reset by peer'))",
        "time" : {
          "start" : 1639695095496,
          "stop" : 1639695095496,
          "duration" : 0
        }
      }, {
        "uid" : "4877f6cf0c5337c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/247//#testresult/4877f6cf0c5337c",
        "status" : "passed",
        "time" : {
          "start" : 1639684851917,
          "stop" : 1639684857832,
          "duration" : 5915
        }
      }, {
        "uid" : "6bf705e49d8c7398",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/245//#testresult/6bf705e49d8c7398",
        "status" : "passed",
        "time" : {
          "start" : 1639674200076,
          "stop" : 1639674206412,
          "duration" : 6336
        }
      }, {
        "uid" : "7557050165498842",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/242//#testresult/7557050165498842",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639663142378,
          "stop" : 1639663142378,
          "duration" : 0
        }
      }, {
        "uid" : "a0d8b372b0f30ea2",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/241//#testresult/a0d8b372b0f30ea2",
        "status" : "passed",
        "time" : {
          "start" : 1639661349568,
          "stop" : 1639661356945,
          "duration" : 7377
        }
      }, {
        "uid" : "4e2b67b748c340ee",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/238//#testresult/4e2b67b748c340ee",
        "status" : "passed",
        "time" : {
          "start" : 1639651850767,
          "stop" : 1639651857484,
          "duration" : 6717
        }
      }, {
        "uid" : "8c0412927d3b307d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/237//#testresult/8c0412927d3b307d",
        "status" : "passed",
        "time" : {
          "start" : 1639648301677,
          "stop" : 1639648308642,
          "duration" : 6965
        }
      }, {
        "uid" : "47b48f4422503051",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/236//#testresult/47b48f4422503051",
        "status" : "passed",
        "time" : {
          "start" : 1639645644178,
          "stop" : 1639645650035,
          "duration" : 5857
        }
      }, {
        "uid" : "5d6b3e1b08568f3e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/235//#testresult/5d6b3e1b08568f3e",
        "status" : "passed",
        "time" : {
          "start" : 1639643220216,
          "stop" : 1639643225982,
          "duration" : 5766
        }
      }, {
        "uid" : "ec6dfb47ee198ea2",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/234//#testresult/ec6dfb47ee198ea2",
        "status" : "passed",
        "time" : {
          "start" : 1639632958725,
          "stop" : 1639632963149,
          "duration" : 4424
        }
      }, {
        "uid" : "c6f8bbf7694da65d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/233//#testresult/c6f8bbf7694da65d",
        "status" : "passed",
        "time" : {
          "start" : 1639624520094,
          "stop" : 1639624527577,
          "duration" : 7483
        }
      }, {
        "uid" : "54060cd009f6b262",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/232//#testresult/54060cd009f6b262",
        "status" : "passed",
        "time" : {
          "start" : 1639614721625,
          "stop" : 1639614727657,
          "duration" : 6032
        }
      }, {
        "uid" : "17a1892ba2dcda6f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/230//#testresult/17a1892ba2dcda6f",
        "status" : "passed",
        "time" : {
          "start" : 1639591000798,
          "stop" : 1639591008449,
          "duration" : 7651
        }
      }, {
        "uid" : "182a2097294bae17",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/228//#testresult/182a2097294bae17",
        "status" : "passed",
        "time" : {
          "start" : 1639580771120,
          "stop" : 1639580775226,
          "duration" : 4106
        }
      }, {
        "uid" : "e921f4cb8901a69",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/227//#testresult/e921f4cb8901a69",
        "status" : "passed",
        "time" : {
          "start" : 1639577826687,
          "stop" : 1639577833585,
          "duration" : 6898
        }
      }, {
        "uid" : "508f7d3b9bc92a68",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/226//#testresult/508f7d3b9bc92a68",
        "status" : "passed",
        "time" : {
          "start" : 1639575132491,
          "stop" : 1639575137571,
          "duration" : 5080
        }
      }, {
        "uid" : "865ca4ae94b61dcc",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/225//#testresult/865ca4ae94b61dcc",
        "status" : "passed",
        "time" : {
          "start" : 1639574808457,
          "stop" : 1639574811661,
          "duration" : 3204
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "8376a8d35e09eac8.json",
  "parameterValues" : [ ]
}