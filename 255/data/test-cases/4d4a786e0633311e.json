{
  "uid" : "4d4a786e0633311e",
  "name" : "test_caller_approval_affected",
  "fullName" : "tests.brownie.token.tests.test_transferFrom#test_caller_approval_affected",
  "historyId" : "d5548e59afb70cb78e10802d517d851a",
  "time" : {
    "start" : 1639739197108,
    "stop" : 1639739199305,
    "duration" : 2197
  },
  "status" : "broken",
  "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x2fb1be45978df02c3d2c03d1a4f2b052c2e4e03099d735459db6fc35c286f120",
  "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f9c2ec0c700>\ntoken = <Token Contract '0xc06275FAcB5A82124D961b0573188A522b4a4b5E'>\n\n    def test_caller_approval_affected(accounts, token):\n        approval_amount = token.balanceOf(accounts[0])\n        transfer_amount = approval_amount // 4\n    \n>       token.approve(accounts[1], approval_amount, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_transferFrom.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0x35D0b67BeB0e9a8147ACbA5883685d3cD601D682'>\nreceipt = <Transaction '\u001B[0;2;37m0x2fb1be45978df02c3d2c03d1a4f2b052c2e4e03099d735459db6fc35c286f120\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x2fb1be45978df02c3d2c03d1a4f2b052c2e4e03099d735459db6fc35c286f120\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1639739103162,
      "stop" : 1639739103162,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1639739104611,
      "stop" : 1639739124950,
      "duration" : 20339
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1639739130260,
      "stop" : 1639739130260,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1639739130261,
      "stop" : 1639739130579,
      "duration" : 318
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1639739173185,
      "stop" : 1639739182176,
      "duration" : 8991
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x2fb1be45978df02c3d2c03d1a4f2b052c2e4e03099d735459db6fc35c286f120",
    "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f9c2ec0c700>\ntoken = <Token Contract '0xc06275FAcB5A82124D961b0573188A522b4a4b5E'>\n\n    def test_caller_approval_affected(accounts, token):\n        approval_amount = token.balanceOf(accounts[0])\n        transfer_amount = approval_amount // 4\n    \n>       token.approve(accounts[1], approval_amount, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_transferFrom.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0x35D0b67BeB0e9a8147ACbA5883685d3cD601D682'>\nreceipt = <Transaction '\u001B[0;2;37m0x2fb1be45978df02c3d2c03d1a4f2b052c2e4e03099d735459db6fc35c286f120\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x2fb1be45978df02c3d2c03d1a4f2b052c2e4e03099d735459db6fc35c286f120\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8c9c585ab9a61178",
      "name" : "stdout",
      "source" : "8c9c585ab9a61178.txt",
      "type" : "text/plain",
      "size" : 195
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1639739564866,
      "stop" : 1639739564867,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transferFrom"
  }, {
    "name" : "host",
    "value" : "fv-az39-454"
  }, {
    "name" : "thread",
    "value" : "4483-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transferFrom"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 28,
        "skipped" : 0,
        "passed" : 82,
        "unknown" : 0,
        "total" : 110
      },
      "items" : [ {
        "uid" : "95260b90577868f9",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/253//#testresult/95260b90577868f9",
        "status" : "broken",
        "statusDetails" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xbe88df5a1c9961aeeeb7e242fa0229e7df7d6a03cdc7b57c3f46d01185f3323e",
        "time" : {
          "start" : 1639724822368,
          "stop" : 1639724822368,
          "duration" : 0
        }
      }, {
        "uid" : "7237b03d2c0802e6",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/251//#testresult/7237b03d2c0802e6",
        "status" : "passed",
        "time" : {
          "start" : 1639710880531,
          "stop" : 1639710891068,
          "duration" : 10537
        }
      }, {
        "uid" : "58e483fbb070aa42",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/250//#testresult/58e483fbb070aa42",
        "status" : "passed",
        "time" : {
          "start" : 1639701392229,
          "stop" : 1639701398526,
          "duration" : 6297
        }
      }, {
        "uid" : "2c1f259d78aaad7a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/249//#testresult/2c1f259d78aaad7a",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ChunkedEncodingError: (\"Connection broken: ConnectionResetError(104, 'Connection reset by peer')\", ConnectionResetError(104, 'Connection reset by peer'))",
        "time" : {
          "start" : 1639695096434,
          "stop" : 1639695096434,
          "duration" : 0
        }
      }, {
        "uid" : "3465822770410b07",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/247//#testresult/3465822770410b07",
        "status" : "passed",
        "time" : {
          "start" : 1639684874424,
          "stop" : 1639684880498,
          "duration" : 6074
        }
      }, {
        "uid" : "5c1bf6a865f8076c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/245//#testresult/5c1bf6a865f8076c",
        "status" : "passed",
        "time" : {
          "start" : 1639674217562,
          "stop" : 1639674222314,
          "duration" : 4752
        }
      }, {
        "uid" : "16d228d55ba29607",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/242//#testresult/16d228d55ba29607",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639663143047,
          "stop" : 1639663143047,
          "duration" : 0
        }
      }, {
        "uid" : "282871c270ee1771",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/241//#testresult/282871c270ee1771",
        "status" : "passed",
        "time" : {
          "start" : 1639661369189,
          "stop" : 1639661376057,
          "duration" : 6868
        }
      }, {
        "uid" : "5d1620f6ebf356ec",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/238//#testresult/5d1620f6ebf356ec",
        "status" : "passed",
        "time" : {
          "start" : 1639651869615,
          "stop" : 1639651876088,
          "duration" : 6473
        }
      }, {
        "uid" : "d13b04040ab537c6",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/237//#testresult/d13b04040ab537c6",
        "status" : "passed",
        "time" : {
          "start" : 1639648320275,
          "stop" : 1639648325590,
          "duration" : 5315
        }
      }, {
        "uid" : "ee63679118b23646",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/236//#testresult/ee63679118b23646",
        "status" : "passed",
        "time" : {
          "start" : 1639645662941,
          "stop" : 1639645669914,
          "duration" : 6973
        }
      }, {
        "uid" : "bb7cc8d1324c986c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/235//#testresult/bb7cc8d1324c986c",
        "status" : "passed",
        "time" : {
          "start" : 1639643237298,
          "stop" : 1639643244517,
          "duration" : 7219
        }
      }, {
        "uid" : "96dc48325e8b32af",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/234//#testresult/96dc48325e8b32af",
        "status" : "passed",
        "time" : {
          "start" : 1639632971983,
          "stop" : 1639632976841,
          "duration" : 4858
        }
      }, {
        "uid" : "4f2e557b2bedea01",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/233//#testresult/4f2e557b2bedea01",
        "status" : "passed",
        "time" : {
          "start" : 1639624539942,
          "stop" : 1639624545644,
          "duration" : 5702
        }
      }, {
        "uid" : "373acb9b30a5cde8",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/232//#testresult/373acb9b30a5cde8",
        "status" : "passed",
        "time" : {
          "start" : 1639614741421,
          "stop" : 1639614748355,
          "duration" : 6934
        }
      }, {
        "uid" : "51ec44d0a55301de",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/230//#testresult/51ec44d0a55301de",
        "status" : "passed",
        "time" : {
          "start" : 1639591021530,
          "stop" : 1639591026976,
          "duration" : 5446
        }
      }, {
        "uid" : "7a70e945bae32a89",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/228//#testresult/7a70e945bae32a89",
        "status" : "passed",
        "time" : {
          "start" : 1639580783668,
          "stop" : 1639580787507,
          "duration" : 3839
        }
      }, {
        "uid" : "e2c78c8b154dd1e4",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/227//#testresult/e2c78c8b154dd1e4",
        "status" : "passed",
        "time" : {
          "start" : 1639577845082,
          "stop" : 1639577849573,
          "duration" : 4491
        }
      }, {
        "uid" : "bf5071cd32f74843",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/226//#testresult/bf5071cd32f74843",
        "status" : "passed",
        "time" : {
          "start" : 1639575146355,
          "stop" : 1639575150859,
          "duration" : 4504
        }
      }, {
        "uid" : "62297b49515b08b5",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/225//#testresult/62297b49515b08b5",
        "status" : "passed",
        "time" : {
          "start" : 1639574817521,
          "stop" : 1639574820700,
          "duration" : 3179
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "4d4a786e0633311e.json",
  "parameterValues" : [ ]
}