{
  "uid" : "caa1906939ad0fdc",
  "name" : "test_revoke_approve",
  "fullName" : "tests.brownie.token.tests.test_approve#test_revoke_approve",
  "historyId" : "493792eebd5a4fea1ce221a16db97b7d",
  "time" : {
    "start" : 1639739144296,
    "stop" : 1639739149085,
    "duration" : 4789
  },
  "status" : "broken",
  "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xd64b4c5208c90432a5fe10a9070ff925514719043dba85f23009de7b77c7f17f",
  "statusTrace" : "token = <Token Contract '0x5C289BEfCe650623C5B021e7566E9a6A9fbB8F32'>\naccounts = <brownie.network.account.Accounts object at 0x7f9c2ec0c700>\n\n    def test_revoke_approve(token, accounts):\n        token.approve(accounts[1], 10**19, {'from': accounts[0]})\n>       token.approve(accounts[1], 0, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_approve.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0x35D0b67BeB0e9a8147ACbA5883685d3cD601D682'>\nreceipt = <Transaction '\u001B[0;2;37m0xd64b4c5208c90432a5fe10a9070ff925514719043dba85f23009de7b77c7f17f\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xd64b4c5208c90432a5fe10a9070ff925514719043dba85f23009de7b77c7f17f\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1639739103162,
      "stop" : 1639739103162,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1639739104611,
      "stop" : 1639739124950,
      "duration" : 20339
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1639739130260,
      "stop" : 1639739130260,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1639739130261,
      "stop" : 1639739130579,
      "duration" : 318
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1639739130580,
      "stop" : 1639739134700,
      "duration" : 4120
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xd64b4c5208c90432a5fe10a9070ff925514719043dba85f23009de7b77c7f17f",
    "statusTrace" : "token = <Token Contract '0x5C289BEfCe650623C5B021e7566E9a6A9fbB8F32'>\naccounts = <brownie.network.account.Accounts object at 0x7f9c2ec0c700>\n\n    def test_revoke_approve(token, accounts):\n        token.approve(accounts[1], 10**19, {'from': accounts[0]})\n>       token.approve(accounts[1], 0, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_approve.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0x35D0b67BeB0e9a8147ACbA5883685d3cD601D682'>\nreceipt = <Transaction '\u001B[0;2;37m0xd64b4c5208c90432a5fe10a9070ff925514719043dba85f23009de7b77c7f17f\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xd64b4c5208c90432a5fe10a9070ff925514719043dba85f23009de7b77c7f17f\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bda3c18389c944b1",
      "name" : "stdout",
      "source" : "bda3c18389c944b1.txt",
      "type" : "text/plain",
      "size" : 545
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1639739564866,
      "stop" : 1639739564867,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_approve"
  }, {
    "name" : "host",
    "value" : "fv-az39-454"
  }, {
    "name" : "thread",
    "value" : "4483-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_approve"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 27,
        "skipped" : 0,
        "passed" : 83,
        "unknown" : 0,
        "total" : 110
      },
      "items" : [ {
        "uid" : "139aedff27881590",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/253//#testresult/139aedff27881590",
        "status" : "broken",
        "statusDetails" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x94527a157d3f5bc621d111fabe95dec392db37b203c9daa286c96607f2b5d108",
        "time" : {
          "start" : 1639724769070,
          "stop" : 1639724771107,
          "duration" : 2037
        }
      }, {
        "uid" : "9768d5e39a80531",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/251//#testresult/9768d5e39a80531",
        "status" : "passed",
        "time" : {
          "start" : 1639710790954,
          "stop" : 1639710796170,
          "duration" : 5216
        }
      }, {
        "uid" : "2feb1a0d69644351",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/250//#testresult/2feb1a0d69644351",
        "status" : "passed",
        "time" : {
          "start" : 1639701309052,
          "stop" : 1639701314689,
          "duration" : 5637
        }
      }, {
        "uid" : "a796f5ef68ea6e85",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/249//#testresult/a796f5ef68ea6e85",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ChunkedEncodingError: (\"Connection broken: ConnectionResetError(104, 'Connection reset by peer')\", ConnectionResetError(104, 'Connection reset by peer'))",
        "time" : {
          "start" : 1639695091508,
          "stop" : 1639695091508,
          "duration" : 0
        }
      }, {
        "uid" : "37d2ebbd13657d65",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/247//#testresult/37d2ebbd13657d65",
        "status" : "passed",
        "time" : {
          "start" : 1639684795916,
          "stop" : 1639684802576,
          "duration" : 6660
        }
      }, {
        "uid" : "699c56931f3e25cb",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/245//#testresult/699c56931f3e25cb",
        "status" : "passed",
        "time" : {
          "start" : 1639674151965,
          "stop" : 1639674157247,
          "duration" : 5282
        }
      }, {
        "uid" : "d5adc1421378eaeb",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/242//#testresult/d5adc1421378eaeb",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639663140768,
          "stop" : 1639663140768,
          "duration" : 0
        }
      }, {
        "uid" : "b4b04a2fc2eef4a3",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/241//#testresult/b4b04a2fc2eef4a3",
        "status" : "passed",
        "time" : {
          "start" : 1639661290581,
          "stop" : 1639661296642,
          "duration" : 6061
        }
      }, {
        "uid" : "98da23e0ac87992e",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/238//#testresult/98da23e0ac87992e",
        "status" : "passed",
        "time" : {
          "start" : 1639651790300,
          "stop" : 1639651796180,
          "duration" : 5880
        }
      }, {
        "uid" : "c4fe013ea2429a47",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/237//#testresult/c4fe013ea2429a47",
        "status" : "passed",
        "time" : {
          "start" : 1639648243113,
          "stop" : 1639648248285,
          "duration" : 5172
        }
      }, {
        "uid" : "915aef554e392c5c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/236//#testresult/915aef554e392c5c",
        "status" : "passed",
        "time" : {
          "start" : 1639645587163,
          "stop" : 1639645592568,
          "duration" : 5405
        }
      }, {
        "uid" : "11601d1a1e6ebd97",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/235//#testresult/11601d1a1e6ebd97",
        "status" : "passed",
        "time" : {
          "start" : 1639643158736,
          "stop" : 1639643164470,
          "duration" : 5734
        }
      }, {
        "uid" : "4530751183869ec0",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/234//#testresult/4530751183869ec0",
        "status" : "passed",
        "time" : {
          "start" : 1639632918371,
          "stop" : 1639632922312,
          "duration" : 3941
        }
      }, {
        "uid" : "d2406613bb950c8d",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/233//#testresult/d2406613bb950c8d",
        "status" : "passed",
        "time" : {
          "start" : 1639624458651,
          "stop" : 1639624464987,
          "duration" : 6336
        }
      }, {
        "uid" : "f017a198a2798464",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/232//#testresult/f017a198a2798464",
        "status" : "passed",
        "time" : {
          "start" : 1639614663833,
          "stop" : 1639614669457,
          "duration" : 5624
        }
      }, {
        "uid" : "bea3fb9ecb6cff45",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/230//#testresult/bea3fb9ecb6cff45",
        "status" : "passed",
        "time" : {
          "start" : 1639590947577,
          "stop" : 1639590953690,
          "duration" : 6113
        }
      }, {
        "uid" : "ae6c819154d3495c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/228//#testresult/ae6c819154d3495c",
        "status" : "passed",
        "time" : {
          "start" : 1639580731274,
          "stop" : 1639580735097,
          "duration" : 3823
        }
      }, {
        "uid" : "f16f72628938451c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/227//#testresult/f16f72628938451c",
        "status" : "passed",
        "time" : {
          "start" : 1639577780128,
          "stop" : 1639577784250,
          "duration" : 4122
        }
      }, {
        "uid" : "bc2f6a63b880251f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/226//#testresult/bc2f6a63b880251f",
        "status" : "passed",
        "time" : {
          "start" : 1639575084551,
          "stop" : 1639575088904,
          "duration" : 4353
        }
      }, {
        "uid" : "eef3c5a070ed821b",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/225//#testresult/eef3c5a070ed821b",
        "status" : "passed",
        "time" : {
          "start" : 1639574774671,
          "stop" : 1639574777655,
          "duration" : 2984
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "caa1906939ad0fdc.json",
  "parameterValues" : [ ]
}