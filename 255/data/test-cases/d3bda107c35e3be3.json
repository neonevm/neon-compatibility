{
  "uid" : "d3bda107c35e3be3",
  "name" : "test_only_affects_target",
  "fullName" : "tests.brownie.token.tests.test_approve#test_only_affects_target",
  "historyId" : "35e636b401a70496879a6cd10541a94f",
  "time" : {
    "start" : 1639739154804,
    "stop" : 1639739156834,
    "duration" : 2030
  },
  "status" : "broken",
  "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xd671bd03a5b1628d5a174e5aad7208c7d194fab0bfb1317eef70b34df55ea2a3",
  "statusTrace" : "token = <Token Contract '0x5C289BEfCe650623C5B021e7566E9a6A9fbB8F32'>\naccounts = <brownie.network.account.Accounts object at 0x7f9c2ec0c700>\n\n    def test_only_affects_target(token, accounts):\n>       token.approve(accounts[1], 10**19, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_approve.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0x35D0b67BeB0e9a8147ACbA5883685d3cD601D682'>\nreceipt = <Transaction '\u001B[0;2;37m0xd671bd03a5b1628d5a174e5aad7208c7d194fab0bfb1317eef70b34df55ea2a3\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xd671bd03a5b1628d5a174e5aad7208c7d194fab0bfb1317eef70b34df55ea2a3\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1639739103162,
      "stop" : 1639739103162,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1639739104611,
      "stop" : 1639739124950,
      "duration" : 20339
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1639739130260,
      "stop" : 1639739130260,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1639739130261,
      "stop" : 1639739130579,
      "duration" : 318
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1639739130580,
      "stop" : 1639739134700,
      "duration" : 4120
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xd671bd03a5b1628d5a174e5aad7208c7d194fab0bfb1317eef70b34df55ea2a3",
    "statusTrace" : "token = <Token Contract '0x5C289BEfCe650623C5B021e7566E9a6A9fbB8F32'>\naccounts = <brownie.network.account.Accounts object at 0x7f9c2ec0c700>\n\n    def test_only_affects_target(token, accounts):\n>       token.approve(accounts[1], 10**19, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_approve.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0x35D0b67BeB0e9a8147ACbA5883685d3cD601D682'>\nreceipt = <Transaction '\u001B[0;2;37m0xd671bd03a5b1628d5a174e5aad7208c7d194fab0bfb1317eef70b34df55ea2a3\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xd671bd03a5b1628d5a174e5aad7208c7d194fab0bfb1317eef70b34df55ea2a3\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "103052f03b48644f",
      "name" : "stdout",
      "source" : "103052f03b48644f.txt",
      "type" : "text/plain",
      "size" : 194
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1639739564866,
      "stop" : 1639739564867,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_approve"
  }, {
    "name" : "host",
    "value" : "fv-az39-454"
  }, {
    "name" : "thread",
    "value" : "4483-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_approve"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 26,
        "skipped" : 0,
        "passed" : 84,
        "unknown" : 0,
        "total" : 110
      },
      "items" : [ {
        "uid" : "5cf7c512ede7bbf4",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/253//#testresult/5cf7c512ede7bbf4",
        "status" : "passed",
        "time" : {
          "start" : 1639724773192,
          "stop" : 1639724777507,
          "duration" : 4315
        }
      }, {
        "uid" : "facf1d78ef17c0f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/251//#testresult/facf1d78ef17c0f",
        "status" : "passed",
        "time" : {
          "start" : 1639710799389,
          "stop" : 1639710802377,
          "duration" : 2988
        }
      }, {
        "uid" : "5b02b294ed1c91c3",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/250//#testresult/5b02b294ed1c91c3",
        "status" : "passed",
        "time" : {
          "start" : 1639701317358,
          "stop" : 1639701320655,
          "duration" : 3297
        }
      }, {
        "uid" : "609636e2535bf96",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/249//#testresult/609636e2535bf96",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ChunkedEncodingError: (\"Connection broken: ConnectionResetError(104, 'Connection reset by peer')\", ConnectionResetError(104, 'Connection reset by peer'))",
        "time" : {
          "start" : 1639695092105,
          "stop" : 1639695092105,
          "duration" : 0
        }
      }, {
        "uid" : "fc86122fb40c0ad7",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/247//#testresult/fc86122fb40c0ad7",
        "status" : "passed",
        "time" : {
          "start" : 1639684806062,
          "stop" : 1639684810476,
          "duration" : 4414
        }
      }, {
        "uid" : "fdd72a4638a0a637",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/245//#testresult/fdd72a4638a0a637",
        "status" : "passed",
        "time" : {
          "start" : 1639674159818,
          "stop" : 1639674162944,
          "duration" : 3126
        }
      }, {
        "uid" : "b9e006d0e0a9a35",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/242//#testresult/b9e006d0e0a9a35",
        "status" : "broken",
        "statusDetails" : "ValueError: Gas estimation failed: 'Transaction simulation failed: Insufficient funds for fee'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
        "time" : {
          "start" : 1639663140954,
          "stop" : 1639663140954,
          "duration" : 0
        }
      }, {
        "uid" : "58cceb4cc08f993",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/241//#testresult/58cceb4cc08f993",
        "status" : "passed",
        "time" : {
          "start" : 1639661299386,
          "stop" : 1639661302459,
          "duration" : 3073
        }
      }, {
        "uid" : "ac4b7f52670cd37a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/238//#testresult/ac4b7f52670cd37a",
        "status" : "passed",
        "time" : {
          "start" : 1639651799002,
          "stop" : 1639651801976,
          "duration" : 2974
        }
      }, {
        "uid" : "2eca8f59a9756e28",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/237//#testresult/2eca8f59a9756e28",
        "status" : "passed",
        "time" : {
          "start" : 1639648251305,
          "stop" : 1639648253935,
          "duration" : 2630
        }
      }, {
        "uid" : "3bbdb773a0d5946c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/236//#testresult/3bbdb773a0d5946c",
        "status" : "passed",
        "time" : {
          "start" : 1639645595277,
          "stop" : 1639645597627,
          "duration" : 2350
        }
      }, {
        "uid" : "fb2f9142bf9ce180",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/235//#testresult/fb2f9142bf9ce180",
        "status" : "passed",
        "time" : {
          "start" : 1639643167724,
          "stop" : 1639643171770,
          "duration" : 4046
        }
      }, {
        "uid" : "eb65fbe3832b9fa1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/234//#testresult/eb65fbe3832b9fa1",
        "status" : "passed",
        "time" : {
          "start" : 1639632924305,
          "stop" : 1639632926419,
          "duration" : 2114
        }
      }, {
        "uid" : "ffcb79f93f365cb6",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/233//#testresult/ffcb79f93f365cb6",
        "status" : "passed",
        "time" : {
          "start" : 1639624467789,
          "stop" : 1639624471900,
          "duration" : 4111
        }
      }, {
        "uid" : "e3a94adb827f3ff",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/232//#testresult/e3a94adb827f3ff",
        "status" : "passed",
        "time" : {
          "start" : 1639614673146,
          "stop" : 1639614676963,
          "duration" : 3817
        }
      }, {
        "uid" : "7d5f05cd07ab7c7f",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/230//#testresult/7d5f05cd07ab7c7f",
        "status" : "passed",
        "time" : {
          "start" : 1639590957266,
          "stop" : 1639590959811,
          "duration" : 2545
        }
      }, {
        "uid" : "88e60316c0e63006",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/228//#testresult/88e60316c0e63006",
        "status" : "passed",
        "time" : {
          "start" : 1639580737116,
          "stop" : 1639580739245,
          "duration" : 2129
        }
      }, {
        "uid" : "b5dea2bc4081d88c",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/227//#testresult/b5dea2bc4081d88c",
        "status" : "passed",
        "time" : {
          "start" : 1639577786967,
          "stop" : 1639577789317,
          "duration" : 2350
        }
      }, {
        "uid" : "2df7b89eca67469",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/226//#testresult/2df7b89eca67469",
        "status" : "passed",
        "time" : {
          "start" : 1639575091060,
          "stop" : 1639575093323,
          "duration" : 2263
        }
      }, {
        "uid" : "160aed8d2a2e2f62",
        "reportUrl" : "https://neonlabsorg.github.io/neon-compatibility/225//#testresult/160aed8d2a2e2f62",
        "status" : "passed",
        "time" : {
          "start" : 1639574779336,
          "stop" : 1639574780907,
          "duration" : 1571
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "d3bda107c35e3be3.json",
  "parameterValues" : [ ]
}